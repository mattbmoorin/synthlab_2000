{"version":3,"file":"reactronica.cjs.development.js","sources":["../src/components/Song.tsx","../src/config/index.ts","../src/types/propTypes.ts","../src/lib/buildSequencerStep.ts","../src/lib/hooks/index.ts","../src/components/Track.tsx","../src/components/Instrument.tsx","../src/components/Effect.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport StartAudioContext from 'startaudiocontext';\n\nimport Tone from '../lib/tone';\n\ntype SongContextProps = {\n  isPlaying: boolean;\n};\n\nexport const SongContext = React.createContext<SongContextProps>({\n  isPlaying: false,\n});\n\nexport type SongProps = {\n  isPlaying?: boolean;\n  bpm?: number;\n  swing?: number;\n  subdivision?: string;\n  swingSubdivision?: string;\n  volume?: number;\n  isMuted?: boolean;\n  children: React.ReactNode;\n};\n\nconst Song: React.FC<SongProps> = ({\n  isPlaying = false,\n  bpm = 90,\n  // subdivision = '4n',\n  swing = 0,\n  swingSubdivision = '8n',\n  volume = 0,\n  isMuted = false,\n  children,\n}) => {\n  useEffect(() => {\n    document.body.addEventListener(\n      'click',\n      () => {\n        // iOS Web Audio API requires this library.\n        StartAudioContext(Tone.context);\n      },\n      {\n        once: true,\n      },\n    );\n  }, []);\n\n  useEffect(() => {\n    Tone.Transport.bpm.value = bpm;\n    Tone.Transport.swing = swing;\n    Tone.Transport.swingSubdivision = swingSubdivision;\n  }, [bpm, swing, swingSubdivision]);\n\n  useEffect(() => {\n    if (isPlaying) {\n      // Hack to get Tone to NOT use same settings from another instance\n      Tone.Transport.bpm.value = bpm;\n      Tone.Transport.swing = swing;\n      Tone.Transport.swingSubdivision = swingSubdivision;\n\n      Tone.Transport.start();\n    } else {\n      Tone.Transport.stop();\n    }\n  }, [isPlaying]);\n\n  useEffect(() => {\n    Tone.Master.volume.value = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    Tone.Master.mute = isMuted;\n  }, [isMuted]);\n\n  if (typeof window === 'undefined') {\n    return null;\n  }\n\n  return (\n    <SongContext.Provider\n      value={{\n        isPlaying,\n      }}\n    >\n      {children}\n    </SongContext.Provider>\n  );\n};\n\nSong.propTypes = {\n  isPlaying: PropTypes.bool,\n  bpm: PropTypes.number,\n  swing: PropTypes.number,\n  swingSubdivision: PropTypes.oneOf(['8n']),\n  children: PropTypes.node,\n};\n\nexport default Song;\n","export const instruments = [\n  { id: 'amSynth', name: 'AM Synth', props: ['polyphony', 'oscillatorType'] },\n  { id: 'duoSynth', name: 'Duo Synth', props: ['polyphony', 'oscillatorType'] },\n  { id: 'fmSynth', name: 'FM Synth', props: ['polyphony', 'oscillatorType'] },\n  { id: 'membraneSynth', name: 'Membrane Synth', props: [] },\n  { id: 'metalSynth', name: 'Metal Synth', props: [] },\n  {\n    id: 'monoSynth',\n    name: 'Mono Synth',\n    props: ['polyphony', 'oscillatorType'],\n  },\n  // { id: 'noiseSynth', name: 'Noise Synth' }, // No sound, disabled for now\n  { id: 'pluckSynth', name: 'Pluck Synth', props: [] },\n  { id: 'sampler', name: 'Sampler', props: ['samples'] },\n  { id: 'synth', name: 'Synth', props: ['polyphony', 'oscillatorType'] },\n];\n\nexport const effects = [\n  // --------------------------------------------------------------------------\n  // Tone JS Effects\n  // --------------------------------------------------------------------------\n  { id: 'autoFilter', name: 'Auto Filter' },\n  { id: 'autoPanner', name: 'Auto Panner' },\n  { id: 'autoWah', name: 'Auto Wah' },\n  { id: 'bitCrusher', name: 'Bit Crusher' },\n  // { id: 'chorus', name: 'Chorus' },\n  { id: 'distortion', name: 'Distortion' },\n  { id: 'feedbackDelay', name: 'Feedback Delay' },\n  { id: 'freeverb', name: 'Freeverb' },\n  { id: 'panVol', name: 'Volume/Pan' },\n  // { id: 'reverb', name: 'Reverb' },\n  { id: 'tremolo', name: 'Tremolo' },\n  // --------------------------------------------------------------------------\n  // Tone JS Components\n  // --------------------------------------------------------------------------\n  { id: 'eq3', name: 'EQ3' },\n];\n\nconst config = {\n  instruments,\n  effects,\n};\n\nexport default config;\n","import PropTypes from 'prop-types';\nimport { instruments, effects } from '../config';\n\nexport const NoteType = PropTypes.shape({\n  name: PropTypes.string.isRequired,\n  duration: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  velocity: PropTypes.number,\n  // pitch: PropTypes.string,\n  // octave: PropTypes.number,\n  // accidental: PropTypes.string,\n  // midi: PropTypes.number,\n});\n\nexport const StepNoteType = PropTypes.shape({\n  name: PropTypes.oneOfType([NoteType, PropTypes.string]),\n  duration: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  velocity: PropTypes.number,\n});\n\nexport const StepType = PropTypes.oneOfType([\n  StepNoteType,\n  PropTypes.arrayOf(StepNoteType),\n  PropTypes.arrayOf(PropTypes.string),\n  PropTypes.string,\n]);\n\nexport const InstrumentTypes = PropTypes.oneOf(\n  instruments.map((effect) => effect.id),\n);\n\nexport const EffectTypes = PropTypes.oneOf(effects.map((effect) => effect.id));\n","import { StepNoteType, StepType } from 'components/Track';\n\nexport type SequencerStep = {\n  notes: StepNoteType[];\n  index: number;\n};\n\nexport default function buildSequencerStep(step: StepType, i): SequencerStep {\n  if (typeof step === 'string') {\n    return {\n      notes: [\n        {\n          name: step,\n        },\n      ],\n      index: i,\n    };\n  } else if (step && (step as StepNoteType).name) {\n    return {\n      notes: [\n        {\n          name: (step as StepNoteType).name,\n          duration: (step as StepNoteType).duration,\n          velocity: (step as StepNoteType).velocity,\n        },\n      ],\n      index: i,\n    };\n  } else if (Array.isArray(step)) {\n    return {\n      notes: step.map((s) => {\n        if (typeof s === 'string') {\n          return {\n            name: s,\n          };\n        }\n\n        return s;\n      }),\n      index: i,\n    };\n  }\n\n  return {\n    notes: [],\n    index: i,\n  };\n}\n","import { useRef, useEffect } from 'react';\n\nexport function usePrevious(value) {\n  // The ref object is a generic container whose current property is mutable ...\n  // ... and can hold any value, similar to an instance property on a class\n  const ref = useRef();\n\n  // Store current value in ref\n  useEffect(() => {\n    ref.current = value;\n  }, [value]); // Only re-run if value changes\n\n  // Return previous value (happens before update in useEffect above)\n  return ref.current;\n}\n","import React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport equal from 'fast-deep-equal';\n\nimport { SongContext } from './Song';\nimport { StepType } from '../types/propTypes';\nimport Tone from '../lib/tone';\nimport buildSequencerStep, { SequencerStep } from '../lib/buildSequencerStep';\nimport { usePrevious } from '../lib/hooks';\n\nexport type StepNoteType = {\n  name: string;\n  duration?: number;\n  velocity?: number;\n};\n\nexport type StepType = StepNoteType | StepNoteType[] | string;\n\nexport interface TrackProps {\n  steps?: StepType[];\n  volume?: number;\n  pan?: number;\n  mute?: boolean;\n  solo?: boolean;\n  subdivision?: string;\n  effects?: React.ReactNode[];\n  children: React.ReactNode;\n  onStepPlay?: (stepNotes: StepNoteType[], index: number) => void;\n}\n\nexport interface TrackConsumerProps extends TrackProps {\n  isPlaying: boolean;\n}\n\nexport const TrackContext = React.createContext({\n  volume: 0,\n  pan: 0,\n  mute: false,\n  solo: false,\n  effectsChain: null,\n  onInstrumentsUpdate: null,\n  onAddToEffectsChain: null,\n  onRemoveFromEffectsChain: null,\n});\n\nconst TrackConsumer: React.FC<TrackConsumerProps> = ({\n  // <Song /> props\n  isPlaying,\n  // <Track /> props\n  steps = [],\n  volume = 0,\n  pan = 0,\n  mute,\n  solo,\n  subdivision = '4n',\n  effects = [],\n  children,\n  onStepPlay,\n}) => {\n  const [effectsChain, setEffectsChain] = useState([]);\n  const [instruments, setInstruments] = useState([]);\n  const sequencer = useRef<{\n    start: Function;\n    stop: Function;\n    remove: Function;\n    add: Function;\n    dispose: Function;\n  }>();\n  const instrumentsRef = useRef(instruments);\n\n  useEffect(() => {\n    instrumentsRef.current = instruments;\n  }, [instruments]);\n\n  /*\n  Tone.Sequence can't easily play chords. By default, arrays within steps are flattened out and subdivided. However an array of notes is our preferred way of representing chords. To get around this, buildSequencerStep() will transform notes and put them in a notes field as an array. We can then loop through and run triggerAttackRelease() to play the note/s.\n  */\n  const sequencerSteps = steps.map(buildSequencerStep);\n  const prevSequencerSteps: SequencerStep[] = usePrevious(sequencerSteps);\n\n  useEffect(() => {\n    // -------------------------------------------------------------------------\n    // STEPS\n    // -------------------------------------------------------------------------\n\n    // Start/Stop sequencer!\n    if (isPlaying) {\n      sequencer.current = new Tone.Sequence(\n        (_, step) => {\n          step.notes.forEach((note) => {\n            instrumentsRef.current.map((instrument) => {\n              instrument.triggerAttackRelease(\n                note.name,\n                note.duration || 0.5,\n                undefined,\n                note.velocity,\n              );\n            });\n          });\n\n          if (typeof onStepPlay === 'function') {\n            onStepPlay(step.notes, step.index);\n          }\n        },\n        sequencerSteps,\n        subdivision,\n      );\n\n      sequencer.current?.start(0);\n    } else {\n      if (sequencer.current) {\n        sequencer.current.stop();\n      }\n    }\n  }, [isPlaying]);\n\n  useEffect(() => {\n    if (sequencer.current) {\n      // const isEqual = equal(steps.notes, prevSequencerSteps[i].notes);\n      sequencerSteps.forEach((step, i) => {\n        const isEqual = equal(\n          sequencerSteps[i].notes,\n          prevSequencerSteps && prevSequencerSteps[i]\n            ? prevSequencerSteps[i].notes\n            : [],\n        );\n\n        if (!isEqual) {\n          sequencer.current?.remove(i);\n          sequencer.current?.add(i, step);\n        }\n      });\n    }\n  }, [JSON.stringify(sequencerSteps)]);\n\n  useEffect(() => {\n    return function cleanup() {\n      if (sequencer.current) {\n        sequencer.current.dispose();\n      }\n    };\n  }, []);\n\n  const handleAddToEffectsChain = (effect) => {\n    // console.log('<Track />', 'onAddToEffectsChain');\n\n    setEffectsChain((prevEffectsChain) => {\n      return [effect, ...prevEffectsChain];\n    });\n  };\n\n  const handleRemoveFromEffectsChain = (effect) => {\n    // console.log('<Track />', 'onRemoveFromEffectsChain', effect);\n\n    setEffectsChain((prevEffectsChain) => {\n      return prevEffectsChain.filter((e) => e.id !== effect.id);\n    });\n  };\n\n  const handleInstrumentsUpdate = (newInstruments) => {\n    setInstruments(newInstruments);\n  };\n\n  return (\n    <TrackContext.Provider\n      value={{\n        effectsChain, // Used by Instrument\n        pan,\n        volume,\n        mute,\n        solo,\n        onInstrumentsUpdate: handleInstrumentsUpdate,\n        onAddToEffectsChain: handleAddToEffectsChain,\n        onRemoveFromEffectsChain: handleRemoveFromEffectsChain,\n      }}\n    >\n      {children}\n      {effects}\n    </TrackContext.Provider>\n  );\n};\n\nTrackConsumer.propTypes = {\n  // <Song /> props\n  isPlaying: PropTypes.bool,\n  // <Track /> props\n  // @ts-ignore\n  steps: PropTypes.arrayOf(StepType),\n  volume: PropTypes.number,\n  pan: PropTypes.number,\n  mute: PropTypes.bool,\n  solo: PropTypes.bool,\n  subdivision: PropTypes.string, // react-music = resolution\n  // effects: PropTypes.oneOfType([\n  //   PropTypes.node,\n  //   PropTypes.arrayOf(PropTypes.element),\n  // ]),\n  onStepPlay: PropTypes.func,\n};\n\nconst Track: React.FC<TrackProps> = (props) => {\n  const { isPlaying } = React.useContext(SongContext);\n\n  if (typeof window === 'undefined') {\n    return null;\n  }\n\n  return <TrackConsumer isPlaying={isPlaying} {...props} />;\n};\n\nexport default Track;\n","import React, {\n  useEffect,\n  useRef,\n  useContext,\n  // useLayoutEffect\n} from 'react';\nimport PropTypes from 'prop-types';\n\n// import { SongContext } from './Song';\nimport { TrackContext } from './Track';\nimport {\n  NoteType as PropTypeNoteType,\n  InstrumentTypes,\n} from '../types/propTypes';\nimport Tone from '../lib/tone';\nimport { usePrevious } from '../lib/hooks';\n\ntype NoteType = {\n  name: string;\n  velocity?: number;\n  duration?: number | string;\n  /** Use unique key to differentiate from same notes, otherwise it won't play */\n  key?: string | number;\n};\n\nexport type InstrumentType =\n  | 'amSynth'\n  | 'duoSynth'\n  | 'fmSynth'\n  | 'membraneSynth'\n  | 'metalSynth'\n  | 'monoSynth'\n  | 'noiseSynth'\n  | 'pluckSynth'\n  | 'synth'\n  | 'sampler';\n\nexport interface InstrumentProps {\n  type: InstrumentType;\n  notes?: NoteType[];\n  /** Should deprecate */\n  options?: any;\n  polyphony?: number;\n  oscillator?: {\n    type: 'triangle' | 'sine' | 'square';\n  };\n  envelope?: {\n    attack?: number;\n    decay?: number;\n    sustain?: number;\n    release?: number;\n  };\n  samples?: {\n    [k: string]: string;\n  };\n  mute?: boolean;\n  solo?: boolean;\n  onLoad?: Function;\n}\n\ninterface InstrumentConsumerProps extends InstrumentProps {\n  volume?: number;\n  pan?: number;\n  effectsChain?: React.ReactNode[];\n  onInstrumentsUpdate?: Function;\n}\n\nconst InstrumentConsumer: React.FC<InstrumentConsumerProps> = ({\n  // <Instrument /> Props\n  type = 'synth',\n  options,\n  polyphony = 4,\n  oscillator,\n  envelope,\n  notes = [],\n  samples,\n  onLoad,\n  // <Track /> Props\n  volume,\n  pan,\n  mute,\n  solo,\n  effectsChain,\n  onInstrumentsUpdate,\n}) => {\n  const instrumentRef = useRef<\n    Partial<{\n      curve: number;\n      release: number;\n      triggerAttack: Function;\n      triggerAttackRelease: Function;\n      triggerRelease: Function;\n      add: Function;\n      set: Function;\n      chain: Function;\n      dispose: Function;\n      disconnect: Function;\n    }>\n  >();\n  // const trackChannelBase = useRef(new Tone.PanVol(pan, volume));\n  // const trackChannelBase = useRef(new Tone.Channel(volume, pan));\n  const trackChannelBase = useRef(null);\n  const prevNotes: any[] = usePrevious(notes);\n\n  // -------------------------------------------------------------------------\n  // CHANNEL\n  // TODO: Consider moving this to <Track>\n  // -------------------------------------------------------------------------\n\n  useEffect(() => {\n    trackChannelBase.current = new Tone.Channel(volume, pan);\n\n    return function cleanup() {\n      if (trackChannelBase.current) {\n        trackChannelBase.current.dispose();\n      }\n    };\n  }, []);\n\n  // -------------------------------------------------------------------------\n  // INSTRUMENT TYPE\n  // -------------------------------------------------------------------------\n\n  useEffect(() => {\n    if (type === 'sampler') {\n      instrumentRef.current = new Tone.Sampler(samples, onLoad);\n\n      if (options && options.curve) {\n        instrumentRef.current.curve = options.curve;\n      }\n\n      if (options && options.release) {\n        instrumentRef.current.release = options.release;\n      }\n    } else if (type === 'membraneSynth') {\n      instrumentRef.current = new Tone.MembraneSynth(\n        buildSynthOptions({\n          oscillator,\n          envelope,\n        }),\n      );\n    } else if (type === 'metalSynth') {\n      instrumentRef.current = new Tone.MetalSynth();\n    } else if (type === 'noiseSynth') {\n      instrumentRef.current = new Tone.NoiseSynth();\n    } else if (type === 'pluckSynth') {\n      instrumentRef.current = new Tone.PluckSynth();\n    } else {\n      let synth;\n\n      if (type === 'amSynth') {\n        synth = Tone.AMSynth;\n      } else if (type === 'duoSynth') {\n        synth = Tone.DuoSynth;\n      } else if (type === 'fmSynth') {\n        synth = Tone.FMSynth;\n      } else if (type === 'monoSynth') {\n        synth = Tone.MonoSynth;\n      } else if (type === 'synth') {\n        synth = Tone.Synth;\n      } else {\n        synth = Tone.Synth;\n      }\n\n      /**\n       * PolySynth accepts other Synth types as second param, making them\n       * polyphonic. As this is a common use case, all Synths will be created\n       * via PolySynth. Monophonic synths can easily be created by setting the\n       * `polyphony` prop to 1.\n       */\n      instrumentRef.current = new Tone.PolySynth(\n        polyphony,\n        synth,\n        buildSynthOptions({\n          oscillator,\n          envelope,\n        }),\n      );\n    }\n\n    instrumentRef.current.chain(\n      ...effectsChain,\n      trackChannelBase.current,\n      Tone.Master,\n    );\n\n    // Add this Instrument to Track Context\n    onInstrumentsUpdate([instrumentRef.current]);\n\n    return function cleanup() {\n      if (instrumentRef.current) {\n        instrumentRef.current.dispose();\n      }\n    };\n  }, [type, polyphony]);\n\n  useEffect(() => {\n    if (\n      // TODO: Add other synth types\n      type === 'synth' &&\n      instrumentRef &&\n      instrumentRef.current &&\n      oscillator\n    ) {\n      instrumentRef.current.set('oscillator', oscillator);\n      // console.log(oscillator);\n    }\n  }, [oscillator, type]);\n\n  // -------------------------------------------------------------------------\n  // VOLUME / PAN / MUTE / SOLO\n  // -------------------------------------------------------------------------\n\n  useEffect(() => {\n    trackChannelBase.current.volume.value = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    trackChannelBase.current.pan.value = pan;\n  }, [pan]);\n\n  useEffect(() => {\n    trackChannelBase.current.mute = mute;\n  }, [mute]);\n\n  useEffect(() => {\n    trackChannelBase.current.solo = solo;\n  }, [solo]);\n\n  // -------------------------------------------------------------------------\n  // NOTES\n  // -------------------------------------------------------------------------\n\n  /**\n   NOTE: Would prefer to use useLayoutEffect as it is a little faster, but unable to test it right now\n   **/\n  useEffect(() => {\n    // Loop through all current notes\n    notes &&\n      notes.forEach((note) => {\n        // Check if note is playing\n        const isPlaying =\n          prevNotes &&\n          prevNotes.filter((prevNote) => {\n            // Check both note name and unique key.\n            // Key helps differentiate same notes, otherwise it won't trigger\n            return prevNote.name === note.name && prevNote.key === note.key;\n          }).length > 0;\n\n        // Only play note is it isn't already playing\n        if (!isPlaying) {\n          if (note.duration) {\n            instrumentRef.current.triggerAttackRelease(\n              note.name,\n              note.duration,\n              undefined,\n              note.velocity,\n            );\n          } else {\n            instrumentRef.current.triggerAttack(\n              note.name,\n              undefined,\n              note.velocity,\n            );\n          }\n        }\n      });\n\n    // Loop through all previous notes\n    prevNotes &&\n      prevNotes.forEach((note) => {\n        // Check if note is still playing\n        const isPlaying =\n          notes && notes.filter((n) => n.name === note.name).length > 0;\n\n        if (!isPlaying) {\n          instrumentRef.current.triggerRelease(note.name);\n        }\n      });\n  }, [notes, prevNotes]);\n\n  // -------------------------------------------------------------------------\n  // EFFECTS CHAIN\n  // -------------------------------------------------------------------------\n\n  useEffect(() => {\n    // NOTE: Using trackChannelBase causes effects to not turn off\n    instrumentRef.current.disconnect();\n    instrumentRef.current.chain(\n      ...effectsChain,\n      trackChannelBase.current,\n      Tone.Master,\n    );\n  }, [effectsChain]);\n\n  // -------------------------------------------------------------------------\n  // SAMPLES\n  // Run whenever `samples` change, using Tone.Sampler's `add` method to load\n  // more samples after initial mount\n  // -------------------------------------------------------------------------\n\n  useEffect(() => {\n    if (\n      type === 'sampler' &&\n      typeof onLoad === 'function' &&\n      Boolean(samples)\n    ) {\n      // Create an array of promises from `samples`\n      const loadSamplePromises = Object.keys(samples).map((key) => {\n        return new Promise((resolve) => {\n          const sample = samples[key];\n\n          // Pass `resolve` to `onLoad` parameter of Tone.Sampler\n          // When sample loads, this promise will resolve\n          instrumentRef.current.add(key, sample, resolve);\n        });\n      });\n\n      // Once all promises in array resolve, run onLoad callback\n      Promise.all(loadSamplePromises).then((event) => {\n        onLoad(event);\n      });\n    }\n  }, [samples, type]);\n\n  return null;\n};\n\nInstrumentConsumer.propTypes = {\n  // <Instrument /> Props\n  // @ts-ignore\n  type: InstrumentTypes.isRequired,\n  options: PropTypes.object,\n  // @ts-ignore\n  notes: PropTypes.arrayOf(PropTypeNoteType), // Currently played notes.\n  polyphony: PropTypes.number,\n  envelope: PropTypes.shape({\n    attack: PropTypes.number,\n    decay: PropTypes.number,\n    sustain: PropTypes.number,\n    release: PropTypes.number,\n  }),\n  // oscillator: PropTypes.shape({\n  //   type: PropTypes.oneOf(['triangle', 'sine', 'square']),\n  // }),\n  // @ts-ignore\n  samples: PropTypes.object,\n  // trackChannel: PropTypes.object, // An instance of new this.Tone.PanVol()\n  // <Track /> Props\n  volume: PropTypes.number,\n  pan: PropTypes.number,\n  mute: PropTypes.bool,\n  solo: PropTypes.bool,\n  effectsChain: PropTypes.array,\n  onInstrumentsUpdate: PropTypes.func,\n};\n\nconst Instrument: React.FC<InstrumentProps> = ({\n  type,\n  options,\n  notes,\n  polyphony,\n  oscillator,\n  envelope,\n  samples,\n  onLoad,\n}) => {\n  const {\n    volume,\n    pan,\n    mute,\n    solo,\n    effectsChain,\n    onInstrumentsUpdate,\n  } = useContext(TrackContext);\n\n  if (typeof window === 'undefined') {\n    return null;\n  }\n\n  return (\n    <InstrumentConsumer\n      // <Instrument /> Props\n      type={type}\n      options={options}\n      notes={notes}\n      polyphony={polyphony}\n      oscillator={oscillator}\n      envelope={envelope}\n      samples={samples}\n      onLoad={onLoad}\n      // <Track /> Props\n      volume={volume}\n      pan={pan}\n      mute={mute}\n      solo={solo}\n      effectsChain={effectsChain}\n      onInstrumentsUpdate={onInstrumentsUpdate}\n    />\n  );\n};\n\n/**\n * Use Instrument's flattened synth props to create options object for Tone JS\n */\nconst buildSynthOptions = ({ oscillator, envelope }) => {\n  if (oscillator || envelope) {\n    return {\n      ...(envelope ? { envelope } : {}),\n      ...(oscillator ? { oscillator } : {}),\n    };\n  }\n\n  return undefined;\n};\n\nexport default Instrument;\n","import React, { useEffect, useContext, useRef } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { TrackContext } from './Track';\nimport Tone from '../lib/tone';\nimport { EffectTypes } from '../types/propTypes';\n\nexport type EffectType =\n  | 'autoFilter'\n  | 'autoPanner'\n  | 'autoWah'\n  | 'bitCrusher'\n  | 'distortion'\n  | 'feedbackDelay'\n  | 'freeverb'\n  | 'panVol'\n  | 'tremolo'\n  | 'eq3';\n\nexport interface EffectProps {\n  type?: EffectType;\n  id?: string;\n  delayTime?: string;\n  feedback?: number;\n  wet?: number;\n  low?: number;\n  mid?: number;\n  high?: number;\n  lowFrequency?: number;\n  highFrequency?: number;\n}\n\nexport interface EffectConsumerProps extends EffectProps {\n  onAddToEffectsChain?: Function;\n  onRemoveFromEffectsChain?: Function;\n}\n\nconst EffectConsumer: React.FC<EffectConsumerProps> = ({\n  type,\n  id,\n  delayTime = '8n',\n  feedback = 0.5,\n  wet = 1,\n  low,\n  mid,\n  high,\n  lowFrequency,\n  highFrequency,\n  onAddToEffectsChain,\n  onRemoveFromEffectsChain,\n}) => {\n  const effect = useRef<{\n    id: string | number;\n    feedback?: {\n      value: number;\n    };\n    delay?: {\n      value: number;\n    };\n    delayTime?: {\n      value: string;\n    };\n    wet?: {\n      value: number;\n    };\n    low?: {\n      value: number;\n    };\n    mid?: {\n      value: number;\n    };\n    high?: {\n      value: number;\n    };\n    lowFrequency?: {\n      value: number;\n    };\n    highFrequency?: {\n      value: number;\n    };\n  }>();\n\n  useEffect(() => {\n    // console.log('<Effect /> mount');\n    // console.log(`id: ${id}`);\n\n    if (type === 'autoFilter') {\n      effect.current = new Tone.AutoFilter();\n    } else if (type === 'autoPanner') {\n      effect.current = new Tone.AutoPanner();\n    } else if (type === 'autoWah') {\n      effect.current = new Tone.AutoWah();\n    } else if (type === 'bitCrusher') {\n      effect.current = new Tone.BitCrusher();\n      // Removed for now because delayTime has to be in ms\n      // } else if (type === 'chorus') {\n      //   effect.current = new Tone.Chorus();\n    } else if (type === 'distortion') {\n      effect.current = new Tone.Distortion(0.5);\n    } else if (type === 'feedbackDelay') {\n      effect.current = new Tone.FeedbackDelay(delayTime, feedback);\n    } else if (type === 'freeverb') {\n      effect.current = new Tone.Freeverb();\n    } else if (type === 'panVol') {\n      effect.current = new Tone.PanVol();\n      // Needs generate()\n      // } else if (type === 'reverb') {\n      //   effect.current = new Tone.Reverb();\n    } else if (type === 'tremolo') {\n      effect.current = new Tone.Tremolo();\n    } else if (type === 'eq3') {\n      effect.current = new Tone.EQ3(low, mid, high);\n    }\n\n    if (effect.current) {\n      effect.current.id = id;\n\n      // Update effects chain\n      // TODO: Work out which index to insert current this.effect\n      onAddToEffectsChain(effect.current);\n    }\n\n    return () => {\n      // console.log('<Effect /> unmount');\n      onRemoveFromEffectsChain(effect.current);\n    };\n  }, [type]);\n\n  useEffect(() => {\n    if (effect.current && effect.current.feedback) {\n      effect.current.feedback.value = feedback;\n    }\n  }, [feedback]);\n\n  useEffect(() => {\n    if (effect.current && effect.current.delayTime) {\n      effect.current.delayTime.value = delayTime;\n    }\n  }, [delayTime]);\n\n  useEffect(() => {\n    if (effect.current && effect.current.wet) {\n      effect.current.wet.value = wet;\n    }\n  }, [wet]);\n\n  useEffect(() => {\n    if (typeof low !== 'undefined' && effect.current && effect.current.low) {\n      effect.current.low.value = low;\n    }\n  }, [low]);\n\n  useEffect(() => {\n    if (typeof mid !== 'undefined' && effect.current && effect.current.mid) {\n      effect.current.mid.value = mid;\n    }\n  }, [mid]);\n\n  useEffect(() => {\n    if (typeof high !== 'undefined' && effect.current && effect.current.high) {\n      effect.current.high.value = high;\n    }\n  }, [high]);\n\n  useEffect(() => {\n    if (\n      typeof lowFrequency !== 'undefined' &&\n      effect.current &&\n      effect.current.lowFrequency\n    ) {\n      effect.current.lowFrequency.value = lowFrequency;\n    }\n  }, [lowFrequency]);\n\n  useEffect(() => {\n    if (\n      typeof highFrequency !== 'undefined' &&\n      effect.current &&\n      effect.current.highFrequency\n    ) {\n      effect.current.highFrequency.value = highFrequency;\n    }\n  }, [highFrequency]);\n\n  return null;\n};\n\nEffectConsumer.propTypes = {\n  // @ts-ignore\n  type: EffectTypes.isRequired,\n  // @ts-ignore\n  id: PropTypes.oneOfType([\n    PropTypes.string.isRequired,\n    PropTypes.number.isRequired,\n  ]),\n  delayTime: PropTypes.string,\n  feedback: PropTypes.number,\n  wet: PropTypes.number,\n  low: PropTypes.number,\n  mid: PropTypes.number,\n  high: PropTypes.number,\n  lowFrequency: PropTypes.number,\n  highFrequency: PropTypes.number,\n  // <Track /> Props\n  onAddToEffectsChain: PropTypes.func,\n  onRemoveFromEffectsChain: PropTypes.func,\n};\n\nconst Effect: React.FC<EffectProps> = (props) => {\n  const { onAddToEffectsChain, onRemoveFromEffectsChain } = useContext(\n    TrackContext,\n  );\n\n  return (\n    <EffectConsumer\n      onAddToEffectsChain={onAddToEffectsChain}\n      onRemoveFromEffectsChain={onRemoveFromEffectsChain}\n      {...props}\n    />\n  );\n};\n\nexport default Effect;\n"],"names":["SongContext","React","createContext","isPlaying","Song","bpm","swing","swingSubdivision","volume","isMuted","children","useEffect","document","body","addEventListener","StartAudioContext","Tone","context","once","Transport","value","start","stop","Master","mute","window","Provider","propTypes","PropTypes","bool","number","oneOf","node","instruments","id","name","props","effects","config","NoteType","shape","string","isRequired","duration","oneOfType","velocity","StepNoteType","StepType","arrayOf","InstrumentTypes","map","effect","EffectTypes","buildSequencerStep","step","i","notes","index","Array","isArray","s","usePrevious","ref","useRef","current","TrackContext","pan","solo","effectsChain","onInstrumentsUpdate","onAddToEffectsChain","onRemoveFromEffectsChain","TrackConsumer","steps","subdivision","onStepPlay","useState","setEffectsChain","setInstruments","sequencer","instrumentsRef","sequencerSteps","prevSequencerSteps","Sequence","_","forEach","note","instrument","triggerAttackRelease","undefined","isEqual","equal","remove","add","JSON","stringify","cleanup","dispose","handleAddToEffectsChain","prevEffectsChain","handleRemoveFromEffectsChain","filter","e","handleInstrumentsUpdate","newInstruments","func","Track","useContext","InstrumentConsumer","type","options","polyphony","oscillator","envelope","samples","onLoad","instrumentRef","trackChannelBase","prevNotes","Channel","Sampler","curve","release","MembraneSynth","buildSynthOptions","MetalSynth","NoiseSynth","PluckSynth","synth","AMSynth","DuoSynth","FMSynth","MonoSynth","Synth","PolySynth","chain","set","prevNote","key","length","triggerAttack","n","triggerRelease","disconnect","Boolean","loadSamplePromises","Object","keys","Promise","resolve","sample","all","then","event","object","PropTypeNoteType","attack","decay","sustain","array","Instrument","EffectConsumer","delayTime","feedback","wet","low","mid","high","lowFrequency","highFrequency","AutoFilter","AutoPanner","AutoWah","BitCrusher","Distortion","FeedbackDelay","Freeverb","PanVol","Tremolo","EQ3","Effect"],"mappings":"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"}