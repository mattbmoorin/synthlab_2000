'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var PropTypes = _interopDefault(require('prop-types'));
var StartAudioContext = _interopDefault(require('startaudiocontext'));
var Tone = _interopDefault(require('tone'));
var equal = _interopDefault(require('fast-deep-equal'));

var SongContext = /*#__PURE__*/React__default.createContext({
  isPlaying: false
});

var Song = function Song(_ref) {
  var _ref$isPlaying = _ref.isPlaying,
      isPlaying = _ref$isPlaying === void 0 ? false : _ref$isPlaying,
      _ref$bpm = _ref.bpm,
      bpm = _ref$bpm === void 0 ? 90 : _ref$bpm,
      _ref$swing = _ref.swing,
      swing = _ref$swing === void 0 ? 0 : _ref$swing,
      _ref$swingSubdivision = _ref.swingSubdivision,
      swingSubdivision = _ref$swingSubdivision === void 0 ? '8n' : _ref$swingSubdivision,
      _ref$volume = _ref.volume,
      volume = _ref$volume === void 0 ? 0 : _ref$volume,
      _ref$isMuted = _ref.isMuted,
      isMuted = _ref$isMuted === void 0 ? false : _ref$isMuted,
      children = _ref.children;
  React.useEffect(function () {
    document.body.addEventListener('click', function () {
      // iOS Web Audio API requires this library.
      StartAudioContext(Tone.context);
    }, {
      once: true
    });
  }, []);
  React.useEffect(function () {
    Tone.Transport.bpm.value = bpm;
    Tone.Transport.swing = swing;
    Tone.Transport.swingSubdivision = swingSubdivision;
  }, [bpm, swing, swingSubdivision]);
  React.useEffect(function () {
    if (isPlaying) {
      // Hack to get Tone to NOT use same settings from another instance
      Tone.Transport.bpm.value = bpm;
      Tone.Transport.swing = swing;
      Tone.Transport.swingSubdivision = swingSubdivision;
      Tone.Transport.start();
    } else {
      Tone.Transport.stop();
    }
  }, [isPlaying]);
  React.useEffect(function () {
    Tone.Master.volume.value = volume;
  }, [volume]);
  React.useEffect(function () {
    Tone.Master.mute = isMuted;
  }, [isMuted]);

  if (typeof window === 'undefined') {
    return null;
  }

  return React__default.createElement(SongContext.Provider, {
    value: {
      isPlaying: isPlaying
    }
  }, children);
};

Song.propTypes = {
  isPlaying: PropTypes.bool,
  bpm: PropTypes.number,
  swing: PropTypes.number,
  swingSubdivision: /*#__PURE__*/PropTypes.oneOf(['8n']),
  children: PropTypes.node
};

var instruments = [{
  id: 'amSynth',
  name: 'AM Synth',
  props: ['polyphony', 'oscillatorType']
}, {
  id: 'duoSynth',
  name: 'Duo Synth',
  props: ['polyphony', 'oscillatorType']
}, {
  id: 'fmSynth',
  name: 'FM Synth',
  props: ['polyphony', 'oscillatorType']
}, {
  id: 'membraneSynth',
  name: 'Membrane Synth',
  props: []
}, {
  id: 'metalSynth',
  name: 'Metal Synth',
  props: []
}, {
  id: 'monoSynth',
  name: 'Mono Synth',
  props: ['polyphony', 'oscillatorType']
}, // { id: 'noiseSynth', name: 'Noise Synth' }, // No sound, disabled for now
{
  id: 'pluckSynth',
  name: 'Pluck Synth',
  props: []
}, {
  id: 'sampler',
  name: 'Sampler',
  props: ['samples']
}, {
  id: 'synth',
  name: 'Synth',
  props: ['polyphony', 'oscillatorType']
}];
var effects = [// --------------------------------------------------------------------------
// Tone JS Effects
// --------------------------------------------------------------------------
{
  id: 'autoFilter',
  name: 'Auto Filter'
}, {
  id: 'autoPanner',
  name: 'Auto Panner'
}, {
  id: 'autoWah',
  name: 'Auto Wah'
}, {
  id: 'bitCrusher',
  name: 'Bit Crusher'
}, // { id: 'chorus', name: 'Chorus' },
{
  id: 'distortion',
  name: 'Distortion'
}, {
  id: 'feedbackDelay',
  name: 'Feedback Delay'
}, {
  id: 'freeverb',
  name: 'Freeverb'
}, {
  id: 'panVol',
  name: 'Volume/Pan'
}, // { id: 'reverb', name: 'Reverb' },
{
  id: 'tremolo',
  name: 'Tremolo'
}, // --------------------------------------------------------------------------
// Tone JS Components
// --------------------------------------------------------------------------
{
  id: 'eq3',
  name: 'EQ3'
}];
var config = {
  instruments: instruments,
  effects: effects
};

var NoteType = /*#__PURE__*/PropTypes.shape({
  name: PropTypes.string.isRequired,
  duration: /*#__PURE__*/PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  velocity: PropTypes.number
});
var StepNoteType = /*#__PURE__*/PropTypes.shape({
  name: /*#__PURE__*/PropTypes.oneOfType([NoteType, PropTypes.string]),
  duration: /*#__PURE__*/PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  velocity: PropTypes.number
});
var StepType = /*#__PURE__*/PropTypes.oneOfType([StepNoteType, /*#__PURE__*/PropTypes.arrayOf(StepNoteType), /*#__PURE__*/PropTypes.arrayOf(PropTypes.string), PropTypes.string]);
var InstrumentTypes = /*#__PURE__*/PropTypes.oneOf( /*#__PURE__*/instruments.map(function (effect) {
  return effect.id;
}));
var EffectTypes = /*#__PURE__*/PropTypes.oneOf( /*#__PURE__*/effects.map(function (effect) {
  return effect.id;
}));

function buildSequencerStep(step, i) {
  if (typeof step === 'string') {
    return {
      notes: [{
        name: step
      }],
      index: i
    };
  } else if (step && step.name) {
    return {
      notes: [{
        name: step.name,
        duration: step.duration,
        velocity: step.velocity
      }],
      index: i
    };
  } else if (Array.isArray(step)) {
    return {
      notes: step.map(function (s) {
        if (typeof s === 'string') {
          return {
            name: s
          };
        }

        return s;
      }),
      index: i
    };
  }

  return {
    notes: [],
    index: i
  };
}

function usePrevious(value) {
  // The ref object is a generic container whose current property is mutable ...
  // ... and can hold any value, similar to an instance property on a class
  var ref = React.useRef(); // Store current value in ref

  React.useEffect(function () {
    ref.current = value;
  }, [value]); // Only re-run if value changes
  // Return previous value (happens before update in useEffect above)

  return ref.current;
}

var TrackContext = /*#__PURE__*/React__default.createContext({
  volume: 0,
  pan: 0,
  mute: false,
  solo: false,
  effectsChain: null,
  onInstrumentsUpdate: null,
  onAddToEffectsChain: null,
  onRemoveFromEffectsChain: null
});

var TrackConsumer = function TrackConsumer(_ref) {
  var isPlaying = _ref.isPlaying,
      _ref$steps = _ref.steps,
      steps = _ref$steps === void 0 ? [] : _ref$steps,
      _ref$volume = _ref.volume,
      volume = _ref$volume === void 0 ? 0 : _ref$volume,
      _ref$pan = _ref.pan,
      pan = _ref$pan === void 0 ? 0 : _ref$pan,
      mute = _ref.mute,
      solo = _ref.solo,
      _ref$subdivision = _ref.subdivision,
      subdivision = _ref$subdivision === void 0 ? '4n' : _ref$subdivision,
      _ref$effects = _ref.effects,
      effects = _ref$effects === void 0 ? [] : _ref$effects,
      children = _ref.children,
      onStepPlay = _ref.onStepPlay;

  var _useState = React.useState([]),
      effectsChain = _useState[0],
      setEffectsChain = _useState[1];

  var _useState2 = React.useState([]),
      instruments = _useState2[0],
      setInstruments = _useState2[1];

  var sequencer = React.useRef();
  var instrumentsRef = React.useRef(instruments);
  React.useEffect(function () {
    instrumentsRef.current = instruments;
  }, [instruments]);
  /*
  Tone.Sequence can't easily play chords. By default, arrays within steps are flattened out and subdivided. However an array of notes is our preferred way of representing chords. To get around this, buildSequencerStep() will transform notes and put them in a notes field as an array. We can then loop through and run triggerAttackRelease() to play the note/s.
  */

  var sequencerSteps = steps.map(buildSequencerStep);
  var prevSequencerSteps = usePrevious(sequencerSteps);
  React.useEffect(function () {
    // -------------------------------------------------------------------------
    // STEPS
    // -------------------------------------------------------------------------
    // Start/Stop sequencer!
    if (isPlaying) {
      var _sequencer$current;

      sequencer.current = new Tone.Sequence(function (_, step) {
        step.notes.forEach(function (note) {
          instrumentsRef.current.map(function (instrument) {
            instrument.triggerAttackRelease(note.name, note.duration || 0.5, undefined, note.velocity);
          });
        });

        if (typeof onStepPlay === 'function') {
          onStepPlay(step.notes, step.index);
        }
      }, sequencerSteps, subdivision);
      (_sequencer$current = sequencer.current) === null || _sequencer$current === void 0 ? void 0 : _sequencer$current.start(0);
    } else {
      if (sequencer.current) {
        sequencer.current.stop();
      }
    }
  }, [isPlaying]);
  React.useEffect(function () {
    if (sequencer.current) {
      // const isEqual = equal(steps.notes, prevSequencerSteps[i].notes);
      sequencerSteps.forEach(function (step, i) {
        var isEqual = equal(sequencerSteps[i].notes, prevSequencerSteps && prevSequencerSteps[i] ? prevSequencerSteps[i].notes : []);

        if (!isEqual) {
          var _sequencer$current2, _sequencer$current3;

          (_sequencer$current2 = sequencer.current) === null || _sequencer$current2 === void 0 ? void 0 : _sequencer$current2.remove(i);
          (_sequencer$current3 = sequencer.current) === null || _sequencer$current3 === void 0 ? void 0 : _sequencer$current3.add(i, step);
        }
      });
    }
  }, [JSON.stringify(sequencerSteps)]);
  React.useEffect(function () {
    return function cleanup() {
      if (sequencer.current) {
        sequencer.current.dispose();
      }
    };
  }, []);

  var handleAddToEffectsChain = function handleAddToEffectsChain(effect) {
    // console.log('<Track />', 'onAddToEffectsChain');
    setEffectsChain(function (prevEffectsChain) {
      return [effect].concat(prevEffectsChain);
    });
  };

  var handleRemoveFromEffectsChain = function handleRemoveFromEffectsChain(effect) {
    // console.log('<Track />', 'onRemoveFromEffectsChain', effect);
    setEffectsChain(function (prevEffectsChain) {
      return prevEffectsChain.filter(function (e) {
        return e.id !== effect.id;
      });
    });
  };

  var handleInstrumentsUpdate = function handleInstrumentsUpdate(newInstruments) {
    setInstruments(newInstruments);
  };

  return React__default.createElement(TrackContext.Provider, {
    value: {
      effectsChain: effectsChain,
      pan: pan,
      volume: volume,
      mute: mute,
      solo: solo,
      onInstrumentsUpdate: handleInstrumentsUpdate,
      onAddToEffectsChain: handleAddToEffectsChain,
      onRemoveFromEffectsChain: handleRemoveFromEffectsChain
    }
  }, children, effects);
};

TrackConsumer.propTypes = {
  // <Song /> props
  isPlaying: PropTypes.bool,
  // <Track /> props
  // @ts-ignore
  steps: /*#__PURE__*/PropTypes.arrayOf(StepType),
  volume: PropTypes.number,
  pan: PropTypes.number,
  mute: PropTypes.bool,
  solo: PropTypes.bool,
  subdivision: PropTypes.string,
  // effects: PropTypes.oneOfType([
  //   PropTypes.node,
  //   PropTypes.arrayOf(PropTypes.element),
  // ]),
  onStepPlay: PropTypes.func
};

var Track = function Track(props) {
  var _React$useContext = React__default.useContext(SongContext),
      isPlaying = _React$useContext.isPlaying;

  if (typeof window === 'undefined') {
    return null;
  }

  return React__default.createElement(TrackConsumer, Object.assign({
    isPlaying: isPlaying
  }, props));
};

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var InstrumentConsumer = function InstrumentConsumer(_ref) {
  var _ref$type = _ref.type,
      type = _ref$type === void 0 ? 'synth' : _ref$type,
      options = _ref.options,
      _ref$polyphony = _ref.polyphony,
      polyphony = _ref$polyphony === void 0 ? 4 : _ref$polyphony,
      oscillator = _ref.oscillator,
      envelope = _ref.envelope,
      _ref$notes = _ref.notes,
      notes = _ref$notes === void 0 ? [] : _ref$notes,
      samples = _ref.samples,
      onLoad = _ref.onLoad,
      volume = _ref.volume,
      pan = _ref.pan,
      mute = _ref.mute,
      solo = _ref.solo,
      effectsChain = _ref.effectsChain,
      onInstrumentsUpdate = _ref.onInstrumentsUpdate;
  var instrumentRef = React.useRef(); // const trackChannelBase = useRef(new Tone.PanVol(pan, volume));
  // const trackChannelBase = useRef(new Tone.Channel(volume, pan));

  var trackChannelBase = React.useRef(null);
  var prevNotes = usePrevious(notes); // -------------------------------------------------------------------------
  // CHANNEL
  // TODO: Consider moving this to <Track>
  // -------------------------------------------------------------------------

  React.useEffect(function () {
    trackChannelBase.current = new Tone.Channel(volume, pan);
    return function cleanup() {
      if (trackChannelBase.current) {
        trackChannelBase.current.dispose();
      }
    };
  }, []); // -------------------------------------------------------------------------
  // INSTRUMENT TYPE
  // -------------------------------------------------------------------------

  React.useEffect(function () {
    var _instrumentRef$curren;

    if (type === 'sampler') {
      instrumentRef.current = new Tone.Sampler(samples, onLoad);

      if (options && options.curve) {
        instrumentRef.current.curve = options.curve;
      }

      if (options && options.release) {
        instrumentRef.current.release = options.release;
      }
    } else if (type === 'membraneSynth') {
      instrumentRef.current = new Tone.MembraneSynth(buildSynthOptions({
        oscillator: oscillator,
        envelope: envelope
      }));
    } else if (type === 'metalSynth') {
      instrumentRef.current = new Tone.MetalSynth();
    } else if (type === 'noiseSynth') {
      instrumentRef.current = new Tone.NoiseSynth();
    } else if (type === 'pluckSynth') {
      instrumentRef.current = new Tone.PluckSynth();
    } else {
      var synth;

      if (type === 'amSynth') {
        synth = Tone.AMSynth;
      } else if (type === 'duoSynth') {
        synth = Tone.DuoSynth;
      } else if (type === 'fmSynth') {
        synth = Tone.FMSynth;
      } else if (type === 'monoSynth') {
        synth = Tone.MonoSynth;
      } else if (type === 'synth') {
        synth = Tone.Synth;
      } else {
        synth = Tone.Synth;
      }
      /**
       * PolySynth accepts other Synth types as second param, making them
       * polyphonic. As this is a common use case, all Synths will be created
       * via PolySynth. Monophonic synths can easily be created by setting the
       * `polyphony` prop to 1.
       */


      instrumentRef.current = new Tone.PolySynth(polyphony, synth, buildSynthOptions({
        oscillator: oscillator,
        envelope: envelope
      }));
    }

    (_instrumentRef$curren = instrumentRef.current).chain.apply(_instrumentRef$curren, effectsChain.concat([trackChannelBase.current, Tone.Master])); // Add this Instrument to Track Context


    onInstrumentsUpdate([instrumentRef.current]);
    return function cleanup() {
      if (instrumentRef.current) {
        instrumentRef.current.dispose();
      }
    };
  }, [type, polyphony]);
  React.useEffect(function () {
    if ( // TODO: Add other synth types
    type === 'synth' && instrumentRef && instrumentRef.current && oscillator) {
      instrumentRef.current.set('oscillator', oscillator); // console.log(oscillator);
    }
  }, [oscillator, type]); // -------------------------------------------------------------------------
  // VOLUME / PAN / MUTE / SOLO
  // -------------------------------------------------------------------------

  React.useEffect(function () {
    trackChannelBase.current.volume.value = volume;
  }, [volume]);
  React.useEffect(function () {
    trackChannelBase.current.pan.value = pan;
  }, [pan]);
  React.useEffect(function () {
    trackChannelBase.current.mute = mute;
  }, [mute]);
  React.useEffect(function () {
    trackChannelBase.current.solo = solo;
  }, [solo]); // -------------------------------------------------------------------------
  // NOTES
  // -------------------------------------------------------------------------

  /**
   NOTE: Would prefer to use useLayoutEffect as it is a little faster, but unable to test it right now
   **/

  React.useEffect(function () {
    // Loop through all current notes
    notes && notes.forEach(function (note) {
      // Check if note is playing
      var isPlaying = prevNotes && prevNotes.filter(function (prevNote) {
        // Check both note name and unique key.
        // Key helps differentiate same notes, otherwise it won't trigger
        return prevNote.name === note.name && prevNote.key === note.key;
      }).length > 0; // Only play note is it isn't already playing

      if (!isPlaying) {
        if (note.duration) {
          instrumentRef.current.triggerAttackRelease(note.name, note.duration, undefined, note.velocity);
        } else {
          instrumentRef.current.triggerAttack(note.name, undefined, note.velocity);
        }
      }
    }); // Loop through all previous notes

    prevNotes && prevNotes.forEach(function (note) {
      // Check if note is still playing
      var isPlaying = notes && notes.filter(function (n) {
        return n.name === note.name;
      }).length > 0;

      if (!isPlaying) {
        instrumentRef.current.triggerRelease(note.name);
      }
    });
  }, [notes, prevNotes]); // -------------------------------------------------------------------------
  // EFFECTS CHAIN
  // -------------------------------------------------------------------------

  React.useEffect(function () {
    var _instrumentRef$curren2;

    // NOTE: Using trackChannelBase causes effects to not turn off
    instrumentRef.current.disconnect();

    (_instrumentRef$curren2 = instrumentRef.current).chain.apply(_instrumentRef$curren2, effectsChain.concat([trackChannelBase.current, Tone.Master]));
  }, [effectsChain]); // -------------------------------------------------------------------------
  // SAMPLES
  // Run whenever `samples` change, using Tone.Sampler's `add` method to load
  // more samples after initial mount
  // -------------------------------------------------------------------------

  React.useEffect(function () {
    if (type === 'sampler' && typeof onLoad === 'function' && Boolean(samples)) {
      // Create an array of promises from `samples`
      var loadSamplePromises = Object.keys(samples).map(function (key) {
        return new Promise(function (resolve) {
          var sample = samples[key]; // Pass `resolve` to `onLoad` parameter of Tone.Sampler
          // When sample loads, this promise will resolve

          instrumentRef.current.add(key, sample, resolve);
        });
      }); // Once all promises in array resolve, run onLoad callback

      Promise.all(loadSamplePromises).then(function (event) {
        onLoad(event);
      });
    }
  }, [samples, type]);
  return null;
};

InstrumentConsumer.propTypes = {
  // <Instrument /> Props
  // @ts-ignore
  type: InstrumentTypes.isRequired,
  options: PropTypes.object,
  // @ts-ignore
  notes: /*#__PURE__*/PropTypes.arrayOf(NoteType),
  polyphony: PropTypes.number,
  envelope: /*#__PURE__*/PropTypes.shape({
    attack: PropTypes.number,
    decay: PropTypes.number,
    sustain: PropTypes.number,
    release: PropTypes.number
  }),
  // oscillator: PropTypes.shape({
  //   type: PropTypes.oneOf(['triangle', 'sine', 'square']),
  // }),
  // @ts-ignore
  samples: PropTypes.object,
  // trackChannel: PropTypes.object, // An instance of new this.Tone.PanVol()
  // <Track /> Props
  volume: PropTypes.number,
  pan: PropTypes.number,
  mute: PropTypes.bool,
  solo: PropTypes.bool,
  effectsChain: PropTypes.array,
  onInstrumentsUpdate: PropTypes.func
};

var Instrument = function Instrument(_ref2) {
  var type = _ref2.type,
      options = _ref2.options,
      notes = _ref2.notes,
      polyphony = _ref2.polyphony,
      oscillator = _ref2.oscillator,
      envelope = _ref2.envelope,
      samples = _ref2.samples,
      onLoad = _ref2.onLoad;

  var _useContext = React.useContext(TrackContext),
      volume = _useContext.volume,
      pan = _useContext.pan,
      mute = _useContext.mute,
      solo = _useContext.solo,
      effectsChain = _useContext.effectsChain,
      onInstrumentsUpdate = _useContext.onInstrumentsUpdate;

  if (typeof window === 'undefined') {
    return null;
  }

  return React__default.createElement(InstrumentConsumer // <Instrument /> Props
  , {
    // <Instrument /> Props
    type: type,
    options: options,
    notes: notes,
    polyphony: polyphony,
    oscillator: oscillator,
    envelope: envelope,
    samples: samples,
    onLoad: onLoad,
    // <Track /> Props
    volume: volume,
    pan: pan,
    mute: mute,
    solo: solo,
    effectsChain: effectsChain,
    onInstrumentsUpdate: onInstrumentsUpdate
  });
};
/**
 * Use Instrument's flattened synth props to create options object for Tone JS
 */


var buildSynthOptions = function buildSynthOptions(_ref3) {
  var oscillator = _ref3.oscillator,
      envelope = _ref3.envelope;

  if (oscillator || envelope) {
    return _extends({}, envelope ? {
      envelope: envelope
    } : {}, {}, oscillator ? {
      oscillator: oscillator
    } : {});
  }

  return undefined;
};

var EffectConsumer = function EffectConsumer(_ref) {
  var type = _ref.type,
      id = _ref.id,
      _ref$delayTime = _ref.delayTime,
      delayTime = _ref$delayTime === void 0 ? '8n' : _ref$delayTime,
      _ref$feedback = _ref.feedback,
      feedback = _ref$feedback === void 0 ? 0.5 : _ref$feedback,
      _ref$wet = _ref.wet,
      wet = _ref$wet === void 0 ? 1 : _ref$wet,
      low = _ref.low,
      mid = _ref.mid,
      high = _ref.high,
      lowFrequency = _ref.lowFrequency,
      highFrequency = _ref.highFrequency,
      onAddToEffectsChain = _ref.onAddToEffectsChain,
      onRemoveFromEffectsChain = _ref.onRemoveFromEffectsChain;
  var effect = React.useRef();
  React.useEffect(function () {
    // console.log('<Effect /> mount');
    // console.log(`id: ${id}`);
    if (type === 'autoFilter') {
      effect.current = new Tone.AutoFilter();
    } else if (type === 'autoPanner') {
      effect.current = new Tone.AutoPanner();
    } else if (type === 'autoWah') {
      effect.current = new Tone.AutoWah();
    } else if (type === 'bitCrusher') {
      effect.current = new Tone.BitCrusher(); // Removed for now because delayTime has to be in ms
      // } else if (type === 'chorus') {
      //   effect.current = new Tone.Chorus();
    } else if (type === 'distortion') {
      effect.current = new Tone.Distortion(0.5);
    } else if (type === 'feedbackDelay') {
      effect.current = new Tone.FeedbackDelay(delayTime, feedback);
    } else if (type === 'freeverb') {
      effect.current = new Tone.Freeverb();
    } else if (type === 'panVol') {
      effect.current = new Tone.PanVol(); // Needs generate()
      // } else if (type === 'reverb') {
      //   effect.current = new Tone.Reverb();
    } else if (type === 'tremolo') {
      effect.current = new Tone.Tremolo();
    } else if (type === 'eq3') {
      effect.current = new Tone.EQ3(low, mid, high);
    }

    if (effect.current) {
      effect.current.id = id; // Update effects chain
      // TODO: Work out which index to insert current this.effect

      onAddToEffectsChain(effect.current);
    }

    return function () {
      // console.log('<Effect /> unmount');
      onRemoveFromEffectsChain(effect.current);
    };
  }, [type]);
  React.useEffect(function () {
    if (effect.current && effect.current.feedback) {
      effect.current.feedback.value = feedback;
    }
  }, [feedback]);
  React.useEffect(function () {
    if (effect.current && effect.current.delayTime) {
      effect.current.delayTime.value = delayTime;
    }
  }, [delayTime]);
  React.useEffect(function () {
    if (effect.current && effect.current.wet) {
      effect.current.wet.value = wet;
    }
  }, [wet]);
  React.useEffect(function () {
    if (typeof low !== 'undefined' && effect.current && effect.current.low) {
      effect.current.low.value = low;
    }
  }, [low]);
  React.useEffect(function () {
    if (typeof mid !== 'undefined' && effect.current && effect.current.mid) {
      effect.current.mid.value = mid;
    }
  }, [mid]);
  React.useEffect(function () {
    if (typeof high !== 'undefined' && effect.current && effect.current.high) {
      effect.current.high.value = high;
    }
  }, [high]);
  React.useEffect(function () {
    if (typeof lowFrequency !== 'undefined' && effect.current && effect.current.lowFrequency) {
      effect.current.lowFrequency.value = lowFrequency;
    }
  }, [lowFrequency]);
  React.useEffect(function () {
    if (typeof highFrequency !== 'undefined' && effect.current && effect.current.highFrequency) {
      effect.current.highFrequency.value = highFrequency;
    }
  }, [highFrequency]);
  return null;
};

EffectConsumer.propTypes = {
  // @ts-ignore
  type: EffectTypes.isRequired,
  // @ts-ignore
  id: /*#__PURE__*/PropTypes.oneOfType([PropTypes.string.isRequired, PropTypes.number.isRequired]),
  delayTime: PropTypes.string,
  feedback: PropTypes.number,
  wet: PropTypes.number,
  low: PropTypes.number,
  mid: PropTypes.number,
  high: PropTypes.number,
  lowFrequency: PropTypes.number,
  highFrequency: PropTypes.number,
  // <Track /> Props
  onAddToEffectsChain: PropTypes.func,
  onRemoveFromEffectsChain: PropTypes.func
};

var Effect = function Effect(props) {
  var _useContext = React.useContext(TrackContext),
      onAddToEffectsChain = _useContext.onAddToEffectsChain,
      onRemoveFromEffectsChain = _useContext.onRemoveFromEffectsChain;

  return React__default.createElement(EffectConsumer, Object.assign({
    onAddToEffectsChain: onAddToEffectsChain,
    onRemoveFromEffectsChain: onRemoveFromEffectsChain
  }, props));
};

exports.Effect = Effect;
exports.Instrument = Instrument;
exports.Song = Song;
exports.Track = Track;
exports.config = config;
//# sourceMappingURL=reactronica.cjs.development.js.map
