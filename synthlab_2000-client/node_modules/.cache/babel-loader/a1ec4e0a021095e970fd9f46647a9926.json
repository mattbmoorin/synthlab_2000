{"ast":null,"code":"var _jsxFileName = \"/Users/wetmath/Development/synthlab_2000/synthlab_2000-client/src/components/Main.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Main = () => {\n  _s();\n\n  // ref objects can be used to store references for elements and any info that needs to be preserved between re-renders\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n  const [currentlyDrawing, setCurrentlyDrawing] = useState(false);\n  useEffect(() => {\n    const canvas = canvasRef.current; // optimize for bigger displays\n\n    canvas.width = window.innerWidth * 2;\n    canvas.height = window.innerHeight * 2;\n    canvas.style.width = `${window.innerWidth}px`;\n    canvas.style.height = `${window.innerHeight}px`; // define 2d context to enable drawing\n\n    const context = canvas.getContext('2d'); // define brush settings and canvas size\n\n    context.scale(2, 2);\n    context.lineCap = 'round';\n    context.strokeStle = 'red';\n    context.lineWidth = 6;\n    contextRef.current = context;\n  }, []);\n\n  const startDraw = ({\n    nativeEvent\n  }) => {\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    contextRef.current.beginPath();\n    contextRef.current.moveTo(offsetX, offsetY);\n    setCurrentlyDrawing(true);\n  };\n\n  const endDraw = () => {\n    contextRef.current.closePath();\n    setCurrentlyDrawing(false);\n  };\n\n  const draw = ({\n    nativeEvent\n  }) => {\n    if (!currentlyDrawing) {\n      return;\n    }\n\n    const {\n      offset,\n      offsetY\n    } = nativeEvent;\n    contextRef.current.lineTo(offsetX, offsetY);\n    contextRef.current.stroke();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    onMouseDown: startDraw,\n    onMouseUp: endDraw,\n    onMouseMove: draw,\n    ref: canvasRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Main, \"duw0sblKtuWLvEJWQg3ZDXCGzjo=\");\n\n_c = Main;\nexport default Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["/Users/wetmath/Development/synthlab_2000/synthlab_2000-client/src/components/Main.jsx"],"names":["React","useEffect","useRef","useState","Main","canvasRef","contextRef","currentlyDrawing","setCurrentlyDrawing","canvas","current","width","window","innerWidth","height","innerHeight","style","context","getContext","scale","lineCap","strokeStle","lineWidth","startDraw","nativeEvent","offsetX","offsetY","beginPath","moveTo","endDraw","closePath","draw","offset","lineTo","stroke"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACjB;AACA,QAAMC,SAAS,GAAGH,MAAM,CAAC,IAAD,CAAxB;AACA,QAAMI,UAAU,GAAGJ,MAAM,CAAC,IAAD,CAAzB;AACA,QAAM,CAACK,gBAAD,EAAmBC,mBAAnB,IAA0CL,QAAQ,CAAC,KAAD,CAAxD;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMQ,MAAM,GAAGJ,SAAS,CAACK,OAAzB,CADc,CAGd;;AACAD,IAAAA,MAAM,CAACE,KAAP,GAAeC,MAAM,CAACC,UAAP,GAAoB,CAAnC;AACAJ,IAAAA,MAAM,CAACK,MAAP,GAAgBF,MAAM,CAACG,WAAP,GAAqB,CAArC;AACAN,IAAAA,MAAM,CAACO,KAAP,CAAaL,KAAb,GAAsB,GAAEC,MAAM,CAACC,UAAW,IAA1C;AACAJ,IAAAA,MAAM,CAACO,KAAP,CAAaF,MAAb,GAAuB,GAAEF,MAAM,CAACG,WAAY,IAA5C,CAPc,CASd;;AACA,UAAME,OAAO,GAAGR,MAAM,CAACS,UAAP,CAAkB,IAAlB,CAAhB,CAVc,CAYd;;AACAD,IAAAA,OAAO,CAACE,KAAR,CAAc,CAAd,EAAiB,CAAjB;AACAF,IAAAA,OAAO,CAACG,OAAR,GAAkB,OAAlB;AACAH,IAAAA,OAAO,CAACI,UAAR,GAAqB,KAArB;AACAJ,IAAAA,OAAO,CAACK,SAAR,GAAoB,CAApB;AACAhB,IAAAA,UAAU,CAACI,OAAX,GAAqBO,OAArB;AACD,GAlBQ,EAkBN,EAlBM,CAAT;;AAoBA,QAAMM,SAAS,GAAG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAqB;AACrC,UAAM;AAAEC,MAAAA,OAAF;AAAWC,MAAAA;AAAX,QAAuBF,WAA7B;AACAlB,IAAAA,UAAU,CAACI,OAAX,CAAmBiB,SAAnB;AACArB,IAAAA,UAAU,CAACI,OAAX,CAAmBkB,MAAnB,CAA0BH,OAA1B,EAAmCC,OAAnC;AACAlB,IAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACD,GALD;;AAOA,QAAMqB,OAAO,GAAG,MAAM;AACpBvB,IAAAA,UAAU,CAACI,OAAX,CAAmBoB,SAAnB;AACAtB,IAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACD,GAHD;;AAKA,QAAMuB,IAAI,GAAG,CAAC;AAAEP,IAAAA;AAAF,GAAD,KAAqB;AAChC,QAAI,CAACjB,gBAAL,EAAuB;AACrB;AACD;;AAED,UAAM;AAAEyB,MAAAA,MAAF;AAAUN,MAAAA;AAAV,QAAsBF,WAA5B;AACAlB,IAAAA,UAAU,CAACI,OAAX,CAAmBuB,MAAnB,CAA0BR,OAA1B,EAAmCC,OAAnC;AACApB,IAAAA,UAAU,CAACI,OAAX,CAAmBwB,MAAnB;AACD,GARD;;AAUA,sBACE;AACE,IAAA,WAAW,EAAEX,SADf;AAEE,IAAA,SAAS,EAAEM,OAFb;AAGE,IAAA,WAAW,EAAEE,IAHf;AAIE,IAAA,GAAG,EAAE1B;AAJP;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CAxDD;;GAAMD,I;;KAAAA,I;AA0DN,eAAeA,IAAf","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\nconst Main = () => {\n  // ref objects can be used to store references for elements and any info that needs to be preserved between re-renders\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n  const [currentlyDrawing, setCurrentlyDrawing] = useState(false);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n\n    // optimize for bigger displays\n    canvas.width = window.innerWidth * 2;\n    canvas.height = window.innerHeight * 2;\n    canvas.style.width = `${window.innerWidth}px`;\n    canvas.style.height = `${window.innerHeight}px`;\n\n    // define 2d context to enable drawing\n    const context = canvas.getContext('2d');\n\n    // define brush settings and canvas size\n    context.scale(2, 2);\n    context.lineCap = 'round';\n    context.strokeStle = 'red';\n    context.lineWidth = 6;\n    contextRef.current = context;\n  }, []);\n\n  const startDraw = ({ nativeEvent }) => {\n    const { offsetX, offsetY } = nativeEvent;\n    contextRef.current.beginPath();\n    contextRef.current.moveTo(offsetX, offsetY);\n    setCurrentlyDrawing(true);\n  };\n\n  const endDraw = () => {\n    contextRef.current.closePath();\n    setCurrentlyDrawing(false);\n  };\n\n  const draw = ({ nativeEvent }) => {\n    if (!currentlyDrawing) {\n      return;\n    }\n\n    const { offset, offsetY } = nativeEvent;\n    contextRef.current.lineTo(offsetX, offsetY);\n    contextRef.current.stroke();\n  };\n\n  return (\n    <canvas\n      onMouseDown={startDraw}\n      onMouseUp={endDraw}\n      onMouseMove={draw}\n      ref={canvasRef}\n    />\n  );\n};\n\nexport default Main;\n"]},"metadata":{},"sourceType":"module"}