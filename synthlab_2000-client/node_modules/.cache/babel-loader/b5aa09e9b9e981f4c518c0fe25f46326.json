{"ast":null,"code":"var _jsxFileName = \"/Users/wetmath/Development/synthlab_2000/synthlab_2000-client/src/components/Controller.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport '../App.css';\nimport NoteButton from './NoteButton';\nimport * as Tone from 'tone';\nimport classNames from 'classnames';\nimport FloatRightStyle from './FloatRightStyle';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst GridComponent = () => {\n  const controllerGrid = [];\n\n  for (let i = 0; i < 8; i++) {\n    let noteColumn = [{\n      note: 'C',\n      isSelected: false\n    }, {\n      note: 'E',\n      isSelected: false\n    }, {\n      note: 'A',\n      isSelected: false\n    }, {\n      note: 'G',\n      isSelected: false\n    }];\n    controllerGrid.push(noteColumn);\n  }\n\n  return controllerGrid;\n};\n\n_c = GridComponent;\nconst noteOctave = '5';\n\nconst Controller = () => {\n  _s();\n\n  const [controllerGrid, setControllerGrid] = useState(GridComponent()),\n        [soundIsPlaying, setSoundIsPlaying] = useState(false),\n        [currentColumnStyle, setCurrentColumnStyle] = useState(null);\n  const delay = new Tone.Delay().toDestination();\n  const reverb = new Tone.Reverb().connect(delay);\n  const synthesizer = new Tone.PolySynth.connect(reverb);\n\n  const handleNoteSelected = (selectedColumn, selectedNote) => {\n    let gridWithSelectedNotes = controllerGrid.map((noteColumn, noteColumnIndex) => noteColumn.map((noteCell, noteCellIndex) => {\n      let noteCellCopy = noteCell;\n\n      if (noteColumnIndex === selectedColumn && noteCellIndex === selectedNote) {\n        noteCellCopy.isSelected = !noteCell.isSelected;\n      }\n\n      return noteCellCopy;\n    }));\n    setControllerGrid(gridWithSelectedNotes);\n  };\n\n  const playSequence = async () => {\n    let formattedSelectedNotes = [];\n    controllerGrid.map(noteColumn => {\n      let noteColumnSelectedNotes = [];\n      noteColumn.map(noteShouldPlay => noteShouldPlay.isSelected && noteColumnSelectedNotes.push(noteShouldPlay.note + noteOctave));\n      formattedSelectedNotes.push(noteColumnSelectedNotes);\n    });\n    await Tone.start();\n    const SequencerComponent = new Tone.Sequence( //Sequence callback\n    (time, column) => {\n      setCurrentColumnStyle(column);\n      synthesizer.triggerAttackRelease(formattedSelectedNotes[column], '8n', time);\n    }, //\"Events\" (steps) sent with callback\n    [0, 1, 2, 3, 4, 5, 6, 7], //Subdivision on which to engage callback (8th notes)\n    '8n');\n\n    if (soundIsPlaying) {\n      setSoundIsPlaying(false);\n      setCurrentColumnStyle(null); // If true stop the \"transport\" and garbage collect sequencer after stopping it as well\n\n      await Tone.Transport.stop();\n      await SequencerComponent.stop();\n      await SequencerComponent.clear();\n      await SequencerComponent.dispose();\n      return;\n    }\n\n    setSoundIsPlaying(true);\n    await SequencerComponent.start();\n    await Tone.Transport.start();\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"note-wrapper\",\n      children: controllerGrid.map((noteColumn, noteColumnIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classNames('note-column', {\n          'note-column--active': currentColumnStyle === noteColumnIndex\n        }),\n        children: noteColumn.map(({\n          note,\n          isSelected\n        }, noteCellIndex) => /*#__PURE__*/_jsxDEV(NoteButton, {\n          note: note,\n          isSelected: isSelected,\n          onClick: () => handleNoteSelected(noteColumnIndex, noteCellIndex)\n        }, note + noteColumnIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 15\n        }, this))\n      }, noteColumnIndex + 'column', false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FloatRightStyle, {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"play-button\",\n        onClick: () => playSequence(),\n        children: soundIsPlaying ? '[]' : '|>'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Controller, \"QpQzqOgFShuxhlb/eqU068qD/vM=\");\n\n_c2 = Controller;\nexport default Controller;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"GridComponent\");\n$RefreshReg$(_c2, \"Controller\");","map":{"version":3,"sources":["/Users/wetmath/Development/synthlab_2000/synthlab_2000-client/src/components/Controller.jsx"],"names":["React","useState","NoteButton","Tone","classNames","FloatRightStyle","GridComponent","controllerGrid","i","noteColumn","note","isSelected","push","noteOctave","Controller","setControllerGrid","soundIsPlaying","setSoundIsPlaying","currentColumnStyle","setCurrentColumnStyle","delay","Delay","toDestination","reverb","Reverb","connect","synthesizer","PolySynth","handleNoteSelected","selectedColumn","selectedNote","gridWithSelectedNotes","map","noteColumnIndex","noteCell","noteCellIndex","noteCellCopy","playSequence","formattedSelectedNotes","noteColumnSelectedNotes","noteShouldPlay","start","SequencerComponent","Sequence","time","column","triggerAttackRelease","Transport","stop","clear","dispose"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\n\nimport '../App.css';\n\nimport NoteButton from './NoteButton';\nimport * as Tone from 'tone';\nimport classNames from 'classnames';\nimport FloatRightStyle from './FloatRightStyle';\n\nconst GridComponent = () => {\n  const controllerGrid = [];\n  for (let i = 0; i < 8; i++) {\n    let noteColumn = [\n      { note: 'C', isSelected: false },\n      { note: 'E', isSelected: false },\n      { note: 'A', isSelected: false },\n      { note: 'G', isSelected: false },\n    ];\n    controllerGrid.push(noteColumn);\n  }\n  return controllerGrid;\n};\n\nconst noteOctave = '5';\n\nconst Controller = () => {\n  const [controllerGrid, setControllerGrid] = useState(GridComponent()),\n    [soundIsPlaying, setSoundIsPlaying] = useState(false),\n    [currentColumnStyle, setCurrentColumnStyle] = useState(null);\n\n  const delay = new Tone.Delay().toDestination();\n  const reverb = new Tone.Reverb().connect(delay);\n  const synthesizer = new Tone.PolySynth.connect(reverb);\n\n  const handleNoteSelected = (selectedColumn, selectedNote) => {\n    let gridWithSelectedNotes = controllerGrid.map(\n      (noteColumn, noteColumnIndex) =>\n        noteColumn.map((noteCell, noteCellIndex) => {\n          let noteCellCopy = noteCell;\n\n          if (\n            noteColumnIndex === selectedColumn &&\n            noteCellIndex === selectedNote\n          ) {\n            noteCellCopy.isSelected = !noteCell.isSelected;\n          }\n\n          return noteCellCopy;\n        })\n    );\n\n    setControllerGrid(gridWithSelectedNotes);\n  };\n\n  const playSequence = async () => {\n    let formattedSelectedNotes = [];\n\n    controllerGrid.map((noteColumn) => {\n      let noteColumnSelectedNotes = [];\n      noteColumn.map(\n        (noteShouldPlay) =>\n          noteShouldPlay.isSelected &&\n          noteColumnSelectedNotes.push(noteShouldPlay.note + noteOctave)\n      );\n      formattedSelectedNotes.push(noteColumnSelectedNotes);\n    });\n\n    await Tone.start();\n\n    const SequencerComponent = new Tone.Sequence(\n      //Sequence callback\n      (time, column) => {\n        setCurrentColumnStyle(column);\n        synthesizer.triggerAttackRelease(\n          formattedSelectedNotes[column],\n          '8n',\n          time\n        );\n      },\n      //\"Events\" (steps) sent with callback\n      [0, 1, 2, 3, 4, 5, 6, 7],\n      //Subdivision on which to engage callback (8th notes)\n      '8n'\n    );\n\n    if (soundIsPlaying) {\n      setSoundIsPlaying(false);\n      setCurrentColumnStyle(null);\n\n      // If true stop the \"transport\" and garbage collect sequencer after stopping it as well\n      await Tone.Transport.stop();\n      await SequencerComponent.stop();\n      await SequencerComponent.clear();\n      await SequencerComponent.dispose();\n\n      return;\n    }\n    setSoundIsPlaying(true);\n\n    await SequencerComponent.start();\n    await Tone.Transport.start();\n  };\n\n  return (\n    <>\n      <div className=\"note-wrapper\">\n        {controllerGrid.map((noteColumn, noteColumnIndex) => (\n          <div\n            className={classNames('note-column', {\n              'note-column--active': currentColumnStyle === noteColumnIndex,\n            })}\n            key={noteColumnIndex + 'column'}\n          >\n            {noteColumn.map(({ note, isSelected }, noteCellIndex) => (\n              <NoteButton\n                note={note}\n                isSelected={isSelected}\n                onClick={() =>\n                  handleNoteSelected(noteColumnIndex, noteCellIndex)\n                }\n                key={note + noteColumnIndex}\n              />\n            ))}\n          </div>\n        ))}\n      </div>\n      <FloatRightStyle>\n        <button className=\"play-button\" onClick={() => playSequence()}>\n          {soundIsPlaying ? '[]' : '|>'}\n        </button>\n      </FloatRightStyle>\n    </>\n  );\n};\n\nexport default Controller;\n"]},"metadata":{},"sourceType":"module"}