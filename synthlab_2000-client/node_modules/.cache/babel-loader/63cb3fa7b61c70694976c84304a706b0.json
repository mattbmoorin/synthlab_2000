{"ast":null,"code":"var _jsxFileName = \"/Users/wetmath/Development/synthlab_2000/synthlab_2000-client/src/components/Main.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Main = () => {\n  _s();\n\n  // ref objects can be used to store references for elements and any info that needs to be preserved between re-renders\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    canvas.width = window.innerWidth * 2;\n    canvas.height = window.innerHeight * 2;\n    canvas.style.width = `${window.innerWidth}px`;\n    canvas.style.height = `${window.innerHeight}px`; // define 2d context to enable drawing\n\n    const context = canvas.getContext('2d');\n  }, []);\n\n  const startDraw = () => {};\n\n  const endDraw = () => {};\n\n  const draw = () => {};\n\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    onMouseDown: startDraw,\n    onMouseUp: endDraw,\n    onMouseMove: draw,\n    ref: canvasRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Main, \"4166hQdVhpFUUkALQs7rNszyGsI=\");\n\n_c = Main;\nexport default Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["/Users/wetmath/Development/synthlab_2000/synthlab_2000-client/src/components/Main.jsx"],"names":["React","useEffect","useRef","Main","canvasRef","contextRef","canvas","current","width","window","innerWidth","height","innerHeight","style","context","getContext","startDraw","endDraw","draw"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACjB;AACA,QAAMC,SAAS,GAAGF,MAAM,CAAC,IAAD,CAAxB;AACA,QAAMG,UAAU,GAAGH,MAAM,CAAC,IAAD,CAAzB;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMK,MAAM,GAAGF,SAAS,CAACG,OAAzB;AACAD,IAAAA,MAAM,CAACE,KAAP,GAAeC,MAAM,CAACC,UAAP,GAAoB,CAAnC;AACAJ,IAAAA,MAAM,CAACK,MAAP,GAAgBF,MAAM,CAACG,WAAP,GAAqB,CAArC;AACAN,IAAAA,MAAM,CAACO,KAAP,CAAaL,KAAb,GAAsB,GAAEC,MAAM,CAACC,UAAW,IAA1C;AACAJ,IAAAA,MAAM,CAACO,KAAP,CAAaF,MAAb,GAAuB,GAAEF,MAAM,CAACG,WAAY,IAA5C,CALc,CAMd;;AACA,UAAME,OAAO,GAAGR,MAAM,CAACS,UAAP,CAAkB,IAAlB,CAAhB;AACD,GARQ,EAQN,EARM,CAAT;;AAUA,QAAMC,SAAS,GAAG,MAAM,CAAE,CAA1B;;AAEA,QAAMC,OAAO,GAAG,MAAM,CAAE,CAAxB;;AAEA,QAAMC,IAAI,GAAG,MAAM,CAAE,CAArB;;AAEA,sBACE;AACE,IAAA,WAAW,EAAEF,SADf;AAEE,IAAA,SAAS,EAAEC,OAFb;AAGE,IAAA,WAAW,EAAEC,IAHf;AAIE,IAAA,GAAG,EAAEd;AAJP;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CA5BD;;GAAMD,I;;KAAAA,I;AA8BN,eAAeA,IAAf","sourcesContent":["import React, { useEffect, useRef } from 'react';\n\nconst Main = () => {\n  // ref objects can be used to store references for elements and any info that needs to be preserved between re-renders\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    canvas.width = window.innerWidth * 2;\n    canvas.height = window.innerHeight * 2;\n    canvas.style.width = `${window.innerWidth}px`;\n    canvas.style.height = `${window.innerHeight}px`;\n    // define 2d context to enable drawing\n    const context = canvas.getContext('2d');\n  }, []);\n\n  const startDraw = () => {};\n\n  const endDraw = () => {};\n\n  const draw = () => {};\n\n  return (\n    <canvas\n      onMouseDown={startDraw}\n      onMouseUp={endDraw}\n      onMouseMove={draw}\n      ref={canvasRef}\n    />\n  );\n};\n\nexport default Main;\n"]},"metadata":{},"sourceType":"module"}