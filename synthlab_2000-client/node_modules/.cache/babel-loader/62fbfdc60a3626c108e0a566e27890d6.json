{"ast":null,"code":"var _jsxFileName = \"/Users/wetmath/Development/synthlab_2000/synthlab_2000-client/src/components/Controller.jsx\";\nimport React from 'react';\nimport { Song, Track, Instrument, Effect } from 'reactronica';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Controller = () => {\n  return (\n    /*#__PURE__*/\n    // Top level component must be the Song, with Tracks nested inside\n    _jsxDEV(Song, {\n      bpm: 90,\n      isPlaying: true,\n      children: [/*#__PURE__*/_jsxDEV(Track // Array of several types\n      , {\n        steps: [// Note in string format\n        'C3', // Object with note and duration\n        {\n          name: 'C3',\n          duration: 0.5\n        }, {\n          name: 'D3',\n          duration: 0.5\n        }, // Array of strings for chords\n        ['C3', 'G3'], null, null, // Array of objects for chords\n        [{\n          name: 'C3',\n          duration: 0.5\n        }, {\n          name: 'G3',\n          duration: 0.5\n        }], null] // Volume in decibels\n        ,\n        volume: 0,\n        pan: 0 // Callback for every tick\n        ,\n        onStepPlay: (step, index) => {\n          doSomething(step, index);\n        },\n        children: [/*#__PURE__*/_jsxDEV(Instrument, {\n          type: \"polySynth\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Effect, {\n          type: \"feedbackDelay\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Effect, {\n          type: \"distortion\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Track, {\n        children: /*#__PURE__*/_jsxDEV(Instrument, {\n          type: \"sampler\",\n          samples: {\n            C3: 'path/to/kick.mp3',\n            D3: 'path/to/snare.mp3',\n            E3: 'path/to/hihat.mp3'\n          } // Add some notes here to play\n          ,\n          notes: [{\n            name: 'C3'\n          }]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n_c = Controller;\nexport default Controller;\n\nvar _c;\n\n$RefreshReg$(_c, \"Controller\");","map":{"version":3,"sources":["/Users/wetmath/Development/synthlab_2000/synthlab_2000-client/src/components/Controller.jsx"],"names":["React","Song","Track","Instrument","Effect","Controller","name","duration","step","index","doSomething","C3","D3","E3"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,UAAtB,EAAkCC,MAAlC,QAAgD,aAAhD;;;AAEA,MAAMC,UAAU,GAAG,MAAM;AACvB;AAAA;AACE;AACA,YAAC,IAAD;AAAM,MAAA,GAAG,EAAE,EAAX;AAAe,MAAA,SAAS,EAAE,IAA1B;AAAA,8BACE,QAAC,KAAD,CACE;AADF;AAEE,QAAA,KAAK,EAAE,CACL;AACA,YAFK,EAGL;AACA;AAAEC,UAAAA,IAAI,EAAE,IAAR;AAAcC,UAAAA,QAAQ,EAAE;AAAxB,SAJK,EAKL;AAAED,UAAAA,IAAI,EAAE,IAAR;AAAcC,UAAAA,QAAQ,EAAE;AAAxB,SALK,EAML;AACA,SAAC,IAAD,EAAO,IAAP,CAPK,EAQL,IARK,EASL,IATK,EAUL;AACA,SACE;AAAED,UAAAA,IAAI,EAAE,IAAR;AAAcC,UAAAA,QAAQ,EAAE;AAAxB,SADF,EAEE;AAAED,UAAAA,IAAI,EAAE,IAAR;AAAcC,UAAAA,QAAQ,EAAE;AAAxB,SAFF,CAXK,EAeL,IAfK,CAFT,CAmBE;AAnBF;AAoBE,QAAA,MAAM,EAAE,CApBV;AAqBE,QAAA,GAAG,EAAE,CArBP,CAsBE;AAtBF;AAuBE,QAAA,UAAU,EAAE,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC3BC,UAAAA,WAAW,CAACF,IAAD,EAAOC,KAAP,CAAX;AACD,SAzBH;AAAA,gCA2BE,QAAC,UAAD;AAAY,UAAA,IAAI,EAAC;AAAjB;AAAA;AAAA;AAAA;AAAA,gBA3BF,eA6BE,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,gBA7BF,eA8BE,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,gBA9BF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAiCE,QAAC,KAAD;AAAA,+BACE,QAAC,UAAD;AACE,UAAA,IAAI,EAAC,SADP;AAEE,UAAA,OAAO,EAAE;AACPE,YAAAA,EAAE,EAAE,kBADG;AAEPC,YAAAA,EAAE,EAAE,mBAFG;AAGPC,YAAAA,EAAE,EAAE;AAHG,WAFX,CAOE;AAPF;AAQE,UAAA,KAAK,EAAE,CAAC;AAAEP,YAAAA,IAAI,EAAE;AAAR,WAAD;AART;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAjCF;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF;AAiDD,CAlDD;;KAAMD,U;AAoDN,eAAeA,UAAf","sourcesContent":["import React from 'react';\nimport { Song, Track, Instrument, Effect } from 'reactronica';\n\nconst Controller = () => {\n  return (\n    // Top level component must be the Song, with Tracks nested inside\n    <Song bpm={90} isPlaying={true}>\n      <Track\n        // Array of several types\n        steps={[\n          // Note in string format\n          'C3',\n          // Object with note and duration\n          { name: 'C3', duration: 0.5 },\n          { name: 'D3', duration: 0.5 },\n          // Array of strings for chords\n          ['C3', 'G3'],\n          null,\n          null,\n          // Array of objects for chords\n          [\n            { name: 'C3', duration: 0.5 },\n            { name: 'G3', duration: 0.5 },\n          ],\n          null,\n        ]}\n        // Volume in decibels\n        volume={0}\n        pan={0}\n        // Callback for every tick\n        onStepPlay={(step, index) => {\n          doSomething(step, index);\n        }}\n      >\n        <Instrument type=\"polySynth\" />\n        {/* Add effects chain here */}\n        <Effect type=\"feedbackDelay\" />\n        <Effect type=\"distortion\" />\n      </Track>\n      <Track>\n        <Instrument\n          type=\"sampler\"\n          samples={{\n            C3: 'path/to/kick.mp3',\n            D3: 'path/to/snare.mp3',\n            E3: 'path/to/hihat.mp3',\n          }}\n          // Add some notes here to play\n          notes={[{ name: 'C3' }]}\n        />\n      </Track>\n    </Song>\n  );\n};\n\nexport default Controller;\n"]},"metadata":{},"sourceType":"module"}