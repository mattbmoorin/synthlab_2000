{"ast":null,"code":"var _jsxFileName = \"/Users/wetmath/Development/synthlab_2000/synthlab_2000-client/src/components/Controller.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport '../App.css';\nimport NoteButton from './NoteButton';\nimport * as Tone from 'tone';\nimport classNames from 'classnames';\nimport FloatRightStyle from './FloatRightStyle';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst GridComponent = () => {\n  const controllerGrid = [];\n\n  for (let i = 0; i < 8; i++) {\n    let noteColumn = [{\n      note: 'C',\n      isSelected: false\n    }, {\n      note: 'E',\n      isSelected: false\n    }, {\n      note: 'A',\n      isSelected: false\n    }, {\n      note: 'G',\n      isSelected: false\n    }];\n    controllerGrid.push(noteColumn);\n  }\n\n  return controllerGrid;\n};\n\n_c = GridComponent;\nconst noteOctave = '5';\n\nconst Controller = ({ ...rest\n}) => {\n  _s();\n\n  const [controllerGrid, setControllerGrid] = useState(GridComponent()),\n        [soundIsPlaying, setSoundIsPlaying] = useState(false),\n        [currentColumnStyle, setCurrentColumnStyle] = useState(null),\n        [reverbSetting, setReverbSetting] = useState(1.5),\n        [delaySetting, setDelaySetting] = useState(0.5);\n  const synthesizer = new Tone.PolySynth();\n  const delay = new Tone.FeedbackDelay({\n    delaySetting\n  }, 0.5);\n  const reverb = new Tone.Reverb({\n    reverbSetting\n  });\n\n  const setReverb = e => {\n    setReverbSetting(e.target.value);\n  };\n\n  const setDelay = e => {\n    setDelaySetting(e.target.value);\n  };\n\n  synthesizer.connect(reverb).connect(delay).toDestination();\n\n  const handleNoteSelected = (selectedColumn, selectedNote) => {\n    let gridWithSelectedNotes = controllerGrid.map((noteColumn, noteColumnIndex) => noteColumn.map((noteCell, noteCellIndex) => {\n      let noteCellCopy = noteCell;\n\n      if (noteColumnIndex === selectedColumn && noteCellIndex === selectedNote) {\n        noteCellCopy.isSelected = !noteCell.isSelected;\n      }\n\n      return noteCellCopy;\n    }));\n    setControllerGrid(gridWithSelectedNotes);\n  };\n\n  const playSequence = async () => {\n    let formattedSelectedNotes = [];\n    controllerGrid.map(noteColumn => {\n      let noteColumnSelectedNotes = [];\n      noteColumn.map(noteShouldPlay => noteShouldPlay.isSelected && noteColumnSelectedNotes.push(noteShouldPlay.note + noteOctave));\n      formattedSelectedNotes.push(noteColumnSelectedNotes);\n    });\n    await Tone.start();\n    const SequencerComponent = new Tone.Sequence( //Sequence callback\n    (time, column) => {\n      setCurrentColumnStyle(column);\n      synthesizer.triggerAttackRelease(formattedSelectedNotes[column], '8n', time);\n    }, //\"Events\" (steps) sent with callback\n    [0, 1, 2, 3, 4, 5, 6, 7], //Subdivision on which to engage callback (8th notes)\n    '8n');\n\n    if (soundIsPlaying) {\n      setSoundIsPlaying(false);\n      setCurrentColumnStyle(null); // If true stop the \"transport\" and garbage collect sequencer after stopping it as well\n\n      await Tone.Transport.stop();\n      await SequencerComponent.stop();\n      await SequencerComponent.clear();\n      await SequencerComponent.dispose();\n      return;\n    }\n\n    setSoundIsPlaying(true);\n    await SequencerComponent.start();\n    await Tone.Transport.start();\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"note-wrapper\",\n      children: controllerGrid.map((noteColumn, noteColumnIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classNames('note-column', {\n          'note-column--active': currentColumnStyle === noteColumnIndex\n        }),\n        children: noteColumn.map(({\n          note,\n          isSelected\n        }, noteCellIndex) => /*#__PURE__*/_jsxDEV(NoteButton, {\n          note: note,\n          isSelected: isSelected,\n          onClick: () => handleNoteSelected(noteColumnIndex, noteCellIndex)\n        }, note + noteColumnIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 15\n        }, this))\n      }, noteColumnIndex + 'column', false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FloatRightStyle, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"play-button\",\n        onClick: () => playSequence(),\n        children: soundIsPlaying ? '[]' : '|>'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"fx-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Reverb:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"reverb\",\n          value: reverbSetting,\n          onChange: setReverb\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Delay:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"delay\",\n          value: delaySetting,\n          onChange: setDelay\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Controller, \"lSf9b3jhc9+TMUcMIsszWs3dpSQ=\");\n\n_c2 = Controller;\nexport default Controller;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"GridComponent\");\n$RefreshReg$(_c2, \"Controller\");","map":{"version":3,"sources":["/Users/wetmath/Development/synthlab_2000/synthlab_2000-client/src/components/Controller.jsx"],"names":["React","useState","NoteButton","Tone","classNames","FloatRightStyle","GridComponent","controllerGrid","i","noteColumn","note","isSelected","push","noteOctave","Controller","rest","setControllerGrid","soundIsPlaying","setSoundIsPlaying","currentColumnStyle","setCurrentColumnStyle","reverbSetting","setReverbSetting","delaySetting","setDelaySetting","synthesizer","PolySynth","delay","FeedbackDelay","reverb","Reverb","setReverb","e","target","value","setDelay","connect","toDestination","handleNoteSelected","selectedColumn","selectedNote","gridWithSelectedNotes","map","noteColumnIndex","noteCell","noteCellIndex","noteCellCopy","playSequence","formattedSelectedNotes","noteColumnSelectedNotes","noteShouldPlay","start","SequencerComponent","Sequence","time","column","triggerAttackRelease","Transport","stop","clear","dispose"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\n\nimport '../App.css';\n\nimport NoteButton from './NoteButton';\nimport * as Tone from 'tone';\nimport classNames from 'classnames';\nimport FloatRightStyle from './FloatRightStyle';\n\nconst GridComponent = () => {\n  const controllerGrid = [];\n  for (let i = 0; i < 8; i++) {\n    let noteColumn = [\n      { note: 'C', isSelected: false },\n      { note: 'E', isSelected: false },\n      { note: 'A', isSelected: false },\n      { note: 'G', isSelected: false },\n    ];\n    controllerGrid.push(noteColumn);\n  }\n  return controllerGrid;\n};\n\nconst noteOctave = '5';\n\nconst Controller = ({ ...rest }) => {\n  const [controllerGrid, setControllerGrid] = useState(GridComponent()),\n    [soundIsPlaying, setSoundIsPlaying] = useState(false),\n    [currentColumnStyle, setCurrentColumnStyle] = useState(null),\n    [reverbSetting, setReverbSetting] = useState(1.5),\n    [delaySetting, setDelaySetting] = useState(0.5);\n\n  const synthesizer = new Tone.PolySynth();\n  const delay = new Tone.FeedbackDelay({ delaySetting }, 0.5);\n  const reverb = new Tone.Reverb({ reverbSetting });\n\n  const setReverb = (e) => {\n    setReverbSetting(e.target.value);\n  };\n\n  const setDelay = (e) => {\n    setDelaySetting(e.target.value);\n  };\n\n  synthesizer.connect(reverb).connect(delay).toDestination();\n\n  const handleNoteSelected = (selectedColumn, selectedNote) => {\n    let gridWithSelectedNotes = controllerGrid.map(\n      (noteColumn, noteColumnIndex) =>\n        noteColumn.map((noteCell, noteCellIndex) => {\n          let noteCellCopy = noteCell;\n\n          if (\n            noteColumnIndex === selectedColumn &&\n            noteCellIndex === selectedNote\n          ) {\n            noteCellCopy.isSelected = !noteCell.isSelected;\n          }\n\n          return noteCellCopy;\n        })\n    );\n\n    setControllerGrid(gridWithSelectedNotes);\n  };\n\n  const playSequence = async () => {\n    let formattedSelectedNotes = [];\n\n    controllerGrid.map((noteColumn) => {\n      let noteColumnSelectedNotes = [];\n      noteColumn.map(\n        (noteShouldPlay) =>\n          noteShouldPlay.isSelected &&\n          noteColumnSelectedNotes.push(noteShouldPlay.note + noteOctave)\n      );\n      formattedSelectedNotes.push(noteColumnSelectedNotes);\n    });\n\n    await Tone.start();\n\n    const SequencerComponent = new Tone.Sequence(\n      //Sequence callback\n      (time, column) => {\n        setCurrentColumnStyle(column);\n        synthesizer.triggerAttackRelease(\n          formattedSelectedNotes[column],\n          '8n',\n          time\n        );\n      },\n      //\"Events\" (steps) sent with callback\n      [0, 1, 2, 3, 4, 5, 6, 7],\n      //Subdivision on which to engage callback (8th notes)\n      '8n'\n    );\n\n    if (soundIsPlaying) {\n      setSoundIsPlaying(false);\n      setCurrentColumnStyle(null);\n\n      // If true stop the \"transport\" and garbage collect sequencer after stopping it as well\n      await Tone.Transport.stop();\n      await SequencerComponent.stop();\n      await SequencerComponent.clear();\n      await SequencerComponent.dispose();\n\n      return;\n    }\n    setSoundIsPlaying(true);\n\n    await SequencerComponent.start();\n    await Tone.Transport.start();\n  };\n\n  return (\n    <>\n      <div className=\"note-wrapper\">\n        {controllerGrid.map((noteColumn, noteColumnIndex) => (\n          <div\n            className={classNames('note-column', {\n              'note-column--active': currentColumnStyle === noteColumnIndex,\n            })}\n            key={noteColumnIndex + 'column'}\n          >\n            {noteColumn.map(({ note, isSelected }, noteCellIndex) => (\n              <NoteButton\n                note={note}\n                isSelected={isSelected}\n                onClick={() =>\n                  handleNoteSelected(noteColumnIndex, noteCellIndex)\n                }\n                key={note + noteColumnIndex}\n              />\n            ))}\n          </div>\n        ))}\n      </div>\n      <FloatRightStyle>\n        <button className=\"play-button\" onClick={() => playSequence()}>\n          {soundIsPlaying ? '[]' : '|>'}\n        </button>\n        <br />\n      </FloatRightStyle>\n      <form id=\"fx-form\">\n        <label>\n          Reverb:\n          <input\n            type=\"text\"\n            name=\"reverb\"\n            value={reverbSetting}\n            onChange={setReverb}\n          />\n        </label>\n        <label>\n          Delay:\n          <input\n            type=\"text\"\n            name=\"delay\"\n            value={delaySetting}\n            onChange={setDelay}\n          />\n        </label>\n      </form>\n    </>\n  );\n};\n\nexport default Controller;\n"]},"metadata":{},"sourceType":"module"}