{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { Song, Track, Instrument, Effect } from 'reactronica';\nimport React, { useState } from 'react';\nimport '../App.css';\nimport * as Tone from 'tone';\nimport Button from 'react-bootstrap/Button';\nimport classNames from 'classnames';\n\nconst GridComponent = () => {\n  const controllerGrid = [];\n\n  for (let i = 0; i < 8; i++) {\n    let noteColumn = [{\n      note: 'C',\n      isSelected: false\n    }, {\n      note: 'E',\n      isSelected: false\n    }, {\n      note: 'A',\n      isSelected: false\n    }, {\n      note: 'G',\n      isSelected: false\n    }];\n    controllerGrid.push(noteColumn);\n  }\n\n  return controllerGrid;\n};\n\n_c = GridComponent;\nconst noteOctave = '3';\n\nconst Controller = () => {\n  _s();\n\n  const [controllerGrid, setControllerGrid] = useState(GridComponent());\n  const [soundIsPlaying, setSoundIsPlaying] = useState(false);\n  const [currentStep, setCurrentStep] = useState(null);\n  const synthesizer = new Tone.PolySynth().toDestination();\n\n  const handleNoteSelected = (selectedColumn, selectedNote) => {\n    let gridWithSelectedNotes = controllerGrid.map((noteColumn, noteColumnIndex) => noteColumn.map((noteCell, noteCellIndex) => {\n      let noteCellCopy = noteCell;\n\n      if (noteColumnIndex === selectedColumn && noteCellIndex === selectedNote) {\n        noteCellCopy.isSelected = !noteCell.isSelected;\n      }\n\n      return noteCellCopy;\n    }));\n    setControllerGrid(gridWithSelectedNotes);\n  };\n\n  const playSequence = async () => {\n    let formattedSelectedNotes = [];\n    controllerGrid.map(noteColumn => {\n      let noteColumnSelectedNotes = [];\n      noteColumn.map(noteShouldPlay => noteShouldPlay.isSelected && noteColumnSelectedNotes.push(noteShouldPlay.note + noteOctave));\n      formattedSelectedNotes.push(noteColumnSelectedNotes);\n    });\n    await Tone.start();\n    const SequencerComponent = new Tone.Sequence( //Sequence callback\n    (time, column) => {\n      setCurrentColumnStyle(column);\n      synthesizer.triggerAttackRelease(formattedSelectedNotes[column], '8n', time);\n    }, //\"Events\" (steps) sent with callback\n    [0, 1, 2, 3, 4, 5, 6, 7], //Subdivision on which to engage callback (8th notes)\n    '8n');\n\n    if (soundIsPlaying) {\n      setSoundIsPlaying(false);\n      setCurrentCollumnStyle(null); // If true stop the \"transport\" and garbage collect sequencer after stopping it as well\n\n      await Tone.Transport.stop();\n      await SequencerComponent.stop();\n      await SequencerComponent.clear();\n      await SequencerComponent.dispose();\n      return;\n    }\n\n    setSoundIsPlaying(true);\n    await SequencerComponent.start();\n    await Tone.Transport.start();\n  };\n\n  return;\n};\n\n_s(Controller, \"Y9+UGxH7dlkeb5v29kBPjkJKbKs=\");\n\n_c2 = Controller;\nexport default Controller;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"GridComponent\");\n$RefreshReg$(_c2, \"Controller\");","map":{"version":3,"sources":["/Users/wetmath/Development/synthlab_2000/synthlab_2000-client/src/components/Controller.jsx"],"names":["Song","Track","Instrument","Effect","React","useState","Tone","Button","classNames","GridComponent","controllerGrid","i","noteColumn","note","isSelected","push","noteOctave","Controller","setControllerGrid","soundIsPlaying","setSoundIsPlaying","currentStep","setCurrentStep","synthesizer","PolySynth","toDestination","handleNoteSelected","selectedColumn","selectedNote","gridWithSelectedNotes","map","noteColumnIndex","noteCell","noteCellIndex","noteCellCopy","playSequence","formattedSelectedNotes","noteColumnSelectedNotes","noteShouldPlay","start","SequencerComponent","Sequence","time","column","setCurrentColumnStyle","triggerAttackRelease","setCurrentCollumnStyle","Transport","stop","clear","dispose"],"mappings":"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","sourcesContent":["import { Song, Track, Instrument, Effect } from 'reactronica';\nimport React, { useState } from 'react';\n\nimport '../App.css';\n\nimport * as Tone from 'tone';\nimport Button from 'react-bootstrap/Button';\nimport classNames from 'classnames';\n\nconst GridComponent = () => {\n  const controllerGrid = [];\n  for (let i = 0; i < 8; i++) {\n    let noteColumn = [\n      { note: 'C', isSelected: false },\n      { note: 'E', isSelected: false },\n      { note: 'A', isSelected: false },\n      { note: 'G', isSelected: false },\n    ];\n    controllerGrid.push(noteColumn);\n  }\n  return controllerGrid;\n};\n\nconst noteOctave = '3';\n\nconst Controller = () => {\n  const [controllerGrid, setControllerGrid] = useState(GridComponent());\n  const [soundIsPlaying, setSoundIsPlaying] = useState(false);\n  const [currentStep, setCurrentStep] = useState(null);\n\n  const synthesizer = new Tone.PolySynth().toDestination();\n\n  const handleNoteSelected = (selectedColumn, selectedNote) => {\n    let gridWithSelectedNotes = controllerGrid.map(\n      (noteColumn, noteColumnIndex) =>\n        noteColumn.map((noteCell, noteCellIndex) => {\n          let noteCellCopy = noteCell;\n\n          if (\n            noteColumnIndex === selectedColumn &&\n            noteCellIndex === selectedNote\n          ) {\n            noteCellCopy.isSelected = !noteCell.isSelected;\n          }\n\n          return noteCellCopy;\n        })\n    );\n\n    setControllerGrid(gridWithSelectedNotes);\n  };\n\n  const playSequence = async () => {\n    let formattedSelectedNotes = [];\n\n    controllerGrid.map((noteColumn) => {\n      let noteColumnSelectedNotes = [];\n      noteColumn.map(\n        (noteShouldPlay) =>\n          noteShouldPlay.isSelected &&\n          noteColumnSelectedNotes.push(noteShouldPlay.note + noteOctave)\n      );\n      formattedSelectedNotes.push(noteColumnSelectedNotes);\n    });\n\n    await Tone.start();\n\n    const SequencerComponent = new Tone.Sequence(\n      //Sequence callback\n      (time, column) => {\n        setCurrentColumnStyle(column);\n        synthesizer.triggerAttackRelease(\n          formattedSelectedNotes[column],\n          '8n',\n          time\n        );\n      },\n      //\"Events\" (steps) sent with callback\n      [0, 1, 2, 3, 4, 5, 6, 7],\n      //Subdivision on which to engage callback (8th notes)\n      '8n'\n    );\n\n    if (soundIsPlaying) {\n      setSoundIsPlaying(false);\n      setCurrentCollumnStyle(null);\n\n      // If true stop the \"transport\" and garbage collect sequencer after stopping it as well\n      await Tone.Transport.stop();\n      await SequencerComponent.stop();\n      await SequencerComponent.clear();\n      await SequencerComponent.dispose();\n\n      return;\n    }\n    setSoundIsPlaying(true);\n\n    await SequencerComponent.start();\n    await Tone.Transport.start();\n  };\n\n  return;\n};\n\nexport default Controller;\n"]},"metadata":{},"sourceType":"module"}